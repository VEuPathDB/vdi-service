---
apiVersion: v1
kind: ConfigMap
metadata:
  name: dev-minio
  namespace: vdi
data:
  MINIO_NOTIFY_AMQP_ENABLE_RABBIT: "on"
  MINIO_NOTIFY_AMQP_URL_RABBIT: "amqp://someUser:somePassword@localhost:5672"
  MINIO_NOTIFY_AMQP_EXCHANGE_RABBIT: "vdi-bucket-notifications"
  MINIO_NOTIFY_AMQP_EXCHANGE_TYPE_RABBIT: "direct"
  MINIO_NOTIFY_AMQP_ROUTING_KEY_RABBIT: "vdi-bucket-notifications"
  MINIO_NOTIFY_AMQP_DELIVERY_MODE_RABBIT: "2"
  MINIO_NOTIFY_AMQP_DURABLE_RABBIT: "on"
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vdi-ingress
  namespace: vdi
spec:
  rules:
    - http:
        paths:
          - backend:
              service:
                name: vdi
                port:
                  number: 80
            pathType: Prefix
            path: /
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vdi
  namespace: vdi
  labels:
    stack: vdi
    network/vdi: "true"
  annotations:
    vault.hashicorp.com/agent-inject: "true"
    vault.hashicorp.com/role: "vdi"
    # TODO: Separate this into individual files with only the env vars needed for each stack component
    vault.hashicorp.com/agent-inject-template-secrets.env: |
      # REST Service
      export AUTH_SECRET_KEY={{ with secret "secrets/veupathdb/auth-secret-key" }}{{ .Data.data.value }}{{ end }}
      export ADMIN_AUTH_TOKEN={{ with secret "secret/vdi/admin-token" }}{{ .Data.data.value }}{{ end }}
      export LDAP_SERVER={{ with secret "secrets/veupathdb/ldap-servers" }}{{ .Data.data.value }}{{ end }}
      export ACCT_DB_USER={{ with secret "secret/database/account" }}{{ .Data.data.username }}{{ end }}
      export ACCT_DB_PASS={{ with secret "secret/database/account" }}{{ .Data.data.password }}{{ end }}
      export USER_DB_USER={{ with secret "secret/database/user" }}{{ .Data.data.username }}{{ end }}
      export USER_DB_PASS={{ with secret "secret/database/user" }}{{ .Data.data.password }}{{ end }}
      
      # Internal DB Service Side
      export CACHE_DB_USERNAME={{ with secret "secret/vdi/cache-db" }}{{ .Data.data.username }}{{ end }}
      export CACHE_DB_PASSWORD={{ with secret "secret/vdi/cache-db" }}{{ .Data.data.password }}{{ end }}
      # Internal DB PG Side
      export POSTGRES_USER={{ with secret "secret/vdi/cache-db" }}{{ .Data.data.username }}{{ end }}
      export POSTGRES_PASSWORD={{ with secret "secret/vdi/cache-db" }}{{ .Data.data.password }}{{ end }}
    
      # RabbitMQ for Service
      export GLOBAL_RABBIT_USERNAME={{ with secret "secret/global/rabbit" }}{{ .Data.data.username }}{{ end }}
      export GLOBAL_RABBIT_PASSWORD={{ with secret "secret/global/rabbit" }}{{ .Data.data.password }}{{ end }}
      # RabbitMQ for dev rabbit instance
      export RABBITMQ_DEFAULT_USER={{ with secret "secret/global/rabbit" }}{{ .Data.data.username }}{{ end }}
      export RABBITMQ_DEFAULT_PASS={{ with secret "secret/global/rabbit" }}{{ .Data.data.password }}{{ end }}

      # Minio for Service
      export S3_ACCESS_TOKEN={{ with secret "secret/global/minio" }}{{ .Data.data.accessToken }}{{ end }}
      export S3_SECRET_KEY={{ with secret "secret/global/minio" }}{{ .Data.data.secretKey }}{{ end }}
      # Minio for dev minio instance
      export MINIO_ROOT_USER={{ with secret "secret/global/minio" }}{{ .Data.data.accessToken }}{{ end }}
      export MINIO_ROOT_PASSWORD={{ with secret "secret/global/minio" }}{{ .Data.data.secretKey }}{{ end }}

      # App Databases
      export DB_CONNECTION_USER_AMOEBA={{ with secret "secret/database/app/amoeba" }}{{ .Data.data.username }}{{ end }}
      export DB_CONNECTION_PASS_AMOEBA={{ with secret "secret/database/app/amoeba" }}{{ .Data.data.password }}{{ end }}
    
      export DB_CONNECTION_USER_CRYPTO={{ with secret "secret/database/app/crypto" }}{{ .Data.data.username }}{{ end }}
      export DB_CONNECTION_PASS_CRYPTO={{ with secret "secret/database/app/crypto" }}{{ .Data.data.password }}{{ end }}
    
      export DB_CONNECTION_USER_FUNGI={{ with secret "secret/database/app/fungi" }}{{ .Data.data.username }}{{ end }}
      export DB_CONNECTION_PASS_FUNGI={{ with secret "secret/database/app/fungi" }}{{ .Data.data.password }}{{ end }}
    
      export DB_CONNECTION_USER_GIARDIA={{ with secret "secret/database/app/giardia" }}{{ .Data.data.username }}{{ end }}
      export DB_CONNECTION_PASS_GIARDIA={{ with secret "secret/database/app/giardia" }}{{ .Data.data.password }}{{ end }}
    
      export DB_CONNECTION_USER_HOST={{ with secret "secret/database/app/host" }}{{ .Data.data.username }}{{ end }}
      export DB_CONNECTION_PASS_HOST={{ with secret "secret/database/app/host" }}{{ .Data.data.password }}{{ end }}
    
      export DB_CONNECTION_USER_MICROSPORIDIA={{ with secret "secret/database/app/microsporidia" }}{{ .Data.data.username }}{{ end }}
      export DB_CONNECTION_PASS_MICROSPORIDIA={{ with secret "secret/database/app/microsporidia" }}{{ .Data.data.password }}{{ end }}
    
      export DB_CONNECTION_USER_PIROPLASMA={{ with secret "secret/database/app/piroplasma" }}{{ .Data.data.username }}{{ end }}
      export DB_CONNECTION_PASS_PIROPLASMA={{ with secret "secret/database/app/piroplasma" }}{{ .Data.data.password }}{{ end }}
    
      export DB_CONNECTION_USER_PLASMO={{ with secret "secret/database/app/plasmo" }}{{ .Data.data.username }}{{ end }}
      export DB_CONNECTION_PASS_PLASMO={{ with secret "secret/database/app/plasmo" }}{{ .Data.data.password }}{{ end }}
    
      export DB_CONNECTION_USER_TOXO={{ with secret "secret/database/app/toxo" }}{{ .Data.data.username }}{{ end }}
      export DB_CONNECTION_PASS_TOXO={{ with secret "secret/database/app/toxo" }}{{ .Data.data.password }}{{ end }}
    
      export DB_CONNECTION_USER_TRICH={{ with secret "secret/database/app/trich" }}{{ .Data.data.username }}{{ end }}
      export DB_CONNECTION_PASS_TRICH={{ with secret "secret/database/app/trich" }}{{ .Data.data.password }}{{ end }}
    
      export DB_CONNECTION_USER_TRITRYP={{ with secret "secret/database/app/tritryp" }}{{ .Data.data.username }}{{ end }}
      export DB_CONNECTION_PASS_TRITRYP={{ with secret "secret/database/app/tritryp" }}{{ .Data.data.password }}{{ end }}
    
      export DB_CONNECTION_USER_VECTOR={{ with secret "secret/database/app/vector" }}{{ .Data.data.username }}{{ end }}
      export DB_CONNECTION_PASS_VECTOR={{ with secret "secret/database/app/vector" }}{{ .Data.data.password }}{{ end }}
    
      export DB_CONNECTION_USER_ORTHO={{ with secret "secret/database/app/ortho" }}{{ .Data.data.username }}{{ end }}
      export DB_CONNECTION_PASS_ORTHO={{ with secret "secret/database/app/ortho" }}{{ .Data.data.password }}{{ end }}
    
      export DB_CONNECTION_USER_CLINEPI={{ with secret "secret/database/app/clinepi" }}{{ .Data.data.username }}{{ end }}
      export DB_CONNECTION_PASS_CLINEPI={{ with secret "secret/database/app/clinepi" }}{{ .Data.data.password }}{{ end }}
    
      export DB_CONNECTION_USER_MICROBIOME={{ with secret "secret/database/app/microbiome" }}{{ .Data.data.username }}{{ end }}
      export DB_CONNECTION_PASS_MICROBIOME={{ with secret "secret/database/app/microbiome" }}{{ .Data.data.password }}{{ end }}

spec:
  replicas: 1
  selector:
    matchLabels:
      stack: vdi
  template:
    metadata:
      labels:
        stack: vdi
    spec:
      volumes:
        - name: user-dataset-mount
          hostPath:
            path: /tmp/vdi
            type: DirectoryOrCreate

      containers:
        # DEV-SPECIFIC CONTAINERS
        - name: minio
          image: minio/minio
          ports:
            - containerPort: 9000
              name: minio-api
            - containerPort: 9001
              name: minio-admin
          envFrom:
            - configMapRef:
                name: dev-minio
          command:
            - /bin/sh
            - -c
            - >
              microdnf install nc;
              while ! nc -zv localhost 5672; do sleep 3; done;
              source /vault/secrets/secrets.env;
              minio server --console-address ':9001' /data;

        - name: minio-setup
          image: minio/mc
          env:
            - name: S3_BUCKET_NAME
              valueFrom:
                configMapKeyRef:
                  key: S3_BUCKET_NAME
                  name: rest-service
          envFrom:
            - configMapRef:
                name: dev-minio
          command:
            - /bin/sh
            - -c
            - >
              microdnf install nc;
              while ! nc -zv localhost 9000; do sleep 3; done;
              mc alias set minioc http://localhost:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
              mc mb minioc/${S3_BUCKET_NAME:?};
              mc policy set public minioc/${S3_BUCKET_NAME:?};
              mc event add minioc/${S3_BUCKET_NAME:?} arn:minio:sqs::RABBIT:amqp --event put,delete;
              exit 0;

        - name: rabbit
          image: rabbitmq:3.12.7-management-alpine
          ports:
            - containerPort: 5672
              name: rabbit-api
            - containerPort: 15672
              name: rabbit-admin
          command:
            - /bin/sh
            - -c
            - >
              source /vault/secrets/secrets.env;
              /usr/local/bin/docker-entrypoint.sh;

        # STANDARD CONTAINERS
        - name: cache-db
          image: veupathdb/vdi-internal-db:1.7.2
          ports:
            - containerPort: 5432
              name: cache-db
          startupProbe:
            exec:
              command:
                - "pg_isready"
            initialDelaySeconds: 10
          readinessProbe:
            exec:
              command:
                - "pg_isready"
          env:
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  key: CACHE_DB_NAME
                  name: rest-service
          command:
            - /bin/sh
            - -c
            - >
              source /vault/secrets/secrets.env;
              /usr/local/bin/docker-entrypoint.sh;
        - name: kafka
          image: veupathdb/apache-kafka:3.4.0
          ports:
            - containerPort: 9092
              name: kafka
          startupProbe:
            tcpSocket:
              port: 9092
            initialDelaySeconds: 10
          readinessProbe:
            tcpSocket:
              port: 9092
            initialDelaySeconds: 10
          envFrom:
            - configMapRef:
                name: kafka
        - name: rest-service
          image: veupathdb/vdi-service:branch-k8s
          ports:
            - containerPort: 80
              name: http-svc
          startupProbe:
            httpGet:
              port: http-svc
              path: /health
            initialDelaySeconds: 30
          readinessProbe:
            httpGet:
              port: http-svc
              path: /health
          envFrom:
            - configMapRef:
                name: globals
            - configMapRef:
                name: database-config
            - configMapRef:
                name: rest-service
            - configMapRef:
                name: plugin-registry
          command:
            - /bin/sh
            - -c
            - >
              source /vault/secrets/secrets.env;
              /startup.sh;
        - name: plugin-example
          image: veupathdb/vdi-plugin-example:latest
          ports:
            - containerPort: 81
              name: plg-example
          startupProbe:
            httpGet:
              port: plg-example
              path: /metrics
          readinessProbe:
            httpGet:
              port: plg-example
              path: /metrics
          volumeMounts:
            - mountPath: /user-datasets
              name: user-dataset-mount
          env:
            - name: SERVER_PORT
              value: "81"
          envFrom:
            - configMapRef:
                name: database-config
            - configMapRef:
                name: plugin-globals
            - configMapRef:
                name: globals
          command:
            - /bin/sh
            - -c
            - >
              source /vault/secrets/secrets.env;
              /startup.sh;
        - name: plugin-genelist
          image: veupathdb/vdi-plugin-genelist:latest
          ports:
            - containerPort: 82
              name: plg-genelist
          startupProbe:
            httpGet:
              port: plg-genelist
              path: /metrics
          readinessProbe:
            httpGet:
              port: plg-genelist
              path: /metrics
          volumeMounts:
            - mountPath: /user-datasets
              name: user-dataset-mount
          env:
            - name: SERVER_PORT
              value: "82"
          envFrom:
            - configMapRef:
                name: database-config
            - configMapRef:
                name: plugin-globals
            - configMapRef:
                name: globals
          command:
            - /bin/sh
            - -c
            - >
              source /vault/secrets/secrets.env;
              /startup.sh;
        - name: plugin-isasimple
          image: veupathdb/vdi-plugin-isasimple:latest
          ports:
            - containerPort: 83
              name: plg-isasimple
          startupProbe:
            httpGet:
              port: plg-isasimple
              path: /metrics
          readinessProbe:
            httpGet:
              port: plg-isasimple
              path: /metrics
          volumeMounts:
            - mountPath: /user-datasets
              name: user-dataset-mount
          env:
            - name: SERVER_PORT
              value: "83"
          envFrom:
            - configMapRef:
                name: database-config
            - configMapRef:
                name: plugin-globals
            - configMapRef:
                name: globals
          command:
            - /bin/sh
            - -c
            - >
              source /vault/secrets/secrets.env;
              /startup.sh;
        - name: plugin-bigwig
          image: veupathdb/vdi-plugin-bigwig:latest
          ports:
            - containerPort: 84
              name: plg-bigwig
          startupProbe:
            httpGet:
              port: plg-bigwig
              path: /metrics
          readinessProbe:
            httpGet:
              port: plg-bigwig
              path: /metrics
          volumeMounts:
            - mountPath: /user-datasets
              name: user-dataset-mount
          env:
            - name: SERVER_PORT
              value: "84"
          envFrom:
            - configMapRef:
                name: database-config
            - configMapRef:
                name: plugin-globals
            - configMapRef:
                name: globals
          command:
            - /bin/sh
            - -c
            - >
              source /vault/secrets/secrets.env;
              /startup.sh;
        - name: plugin-biom
          image: veupathdb/vdi-plugin-biom:latest
          ports:
            - containerPort: 85
              name: plg-biom
          startupProbe:
            httpGet:
              port: plg-biom
              path: /metrics
          readinessProbe:
            httpGet:
              port: plg-biom
              path: /metrics
          volumeMounts:
            - mountPath: /user-datasets
              name: user-dataset-mount
          env:
            - name: SERVER_PORT
              value: "85"
          envFrom:
            - configMapRef:
                name: database-config
            - configMapRef:
                name: plugin-globals
            - configMapRef:
                name: globals
          command:
            - /bin/sh
            - -c
            - >
              source /vault/secrets/secrets.env;
              /startup.sh;
        - name: plugin-rnaseq
          image: veupathdb/vdi-plugin-rnaseq:latest
          ports:
            - containerPort: 86
              name: plg-rnaseq
          startupProbe:
            httpGet:
              port: plg-rnaseq
              path: /metrics
          readinessProbe:
            httpGet:
              port: plg-rnaseq
              path: /metrics
          volumeMounts:
            - mountPath: /user-datasets
              name: user-dataset-mount
          env:
            - name: SERVER_PORT
              value: "86"
          envFrom:
            - configMapRef:
                name: globals
            - configMapRef:
                name: database-config
            - configMapRef:
                name: plugin-globals
          command:
            - /bin/sh
            - -c
            - >
              source /vault/secrets/secrets.env;
              /startup.sh;
