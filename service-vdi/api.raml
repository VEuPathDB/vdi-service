#%RAML 1.0 Extension

extends: https://raw.githubusercontent.com/VEuPathDB/docs-api-schema/v2.2.0/libraries/base-service.raml

title: VEuPathDB Dataset Installer
version: 1.0.0
mediaType: application/json

uses:
  lib: schema/library.raml

/vdi-datasets:
  displayName: Datasets

  get:
    displayName: List Datasets
    description: |
      Returns a list of datasets available to the requesting user, optionally
      filtered by query parameters.

      Results are sorted by creation date in reverse order.  This means the most
      recently created datasets will be first and the oldest dataset will be
      last in the list.
    queryParameters:
      project_id:
        displayName: Project ID Filter
        description: |
          ID of the VEuPathDB project that results should be filtered to.

          This means only datasets that are relevant to the project ID given
          will be returned.
          
          Additionally, this controls the sites on which the dataset
          installation status will be checked.  Meaning, if this parameter is
          specified and set to, for example, `PlasmoDB`, the status block in the
          response objects will only include installation status details for
          `PlasmoDB` and not any other sites that the dataset may have been
          installed into.
        type: lib.ProjectID
        example: PlasmoDB
        required: false
        default: null
      ownership:
        displayName: Dataset Ownership Filter
        description: |
          Ownership status filter.

          Enum of:

          * `any`
          * `owned`
          * `shared`

          If set to `any` the results are not filtered.

          If set to `owned`, the results will be filtered to only results that
          are owned by the requesting user.

          If set to `shared`, the results will be filtered to only results that
          are shared with the requesting user.
        type: string
        default: any
        required: false
      offset:
        displayName: Result Offset
        description: |
          This many results will be skipped before the first result returned.

          Used to implement result pagination.
        type: integer
        default: 0
        required: false
      limit:
        displayName: Result Count Limit
        description: |
          Limits the number of results returned to this count.

          Used to implement result pagination.
        type: integer
        default: 100
        minimum: 1
        maximum: 100
        required: false
      sort_field:
        displayName: Sorting Field
        description: |
          Field used to sort the results of this endpoint.
          
          Valid options are:
          
          - `creation_timestamp`
          - `name`
          
          By default, results are sorted by `creation_timestamp` with a
          `sort_order` query param value of `descending`, however if the sort
          field is changed, then the default value of the `sort_order` query
          param will be `ascending`.

          This means that given the URI `{site}/vdi-datasets` the results will
          be returned in descending order by the creation timestamp of the
          results.
          
          However, given the URI `{site}/vdi-datasets?sort_field=name` the
          results will be returned in ascending order by the user provided name
          for the datasets.
        type: string
        required: false
        default: creation_timestamp
      sort_order:
        displayName: Sorting Order
        description: |
          Sort ordering of the results of this endpoint.
          
          Valid options are:
          
          - ascending
          - descending
          
          By default, results are sorted by the `sort_field` value
          `"creation_timestamp"` in `"descending"` order, however if the sort
          field is changed then the default value of this query parameter
          becomes `"ascending"` by default.
          
          This means that given the URI `{site}/vdi-datasets` the results will
          be returned in descending order by the creation timestamp of the
          results.
          
          However, given the URI `{site}/vdi-datasets?sort_field=name` the
          results will be returned in ascending order by the user provided name
          for the datasets.
    responses:
      200:
        description: |
          Success.
          
          This response means that all checks passed and zero or more dataset
          records were found for the requesting user.
        body:
          application/json:
            type: lib.DatasetListEntry[]
            example:
            - datasetID: b18dcdf1a19c9415cd6594c00d611699
              owner:
                userID: 123456
                displayName: Joe User
                organization: University of Joe
              datasetType:
                name: ISA
                version: "1.0"
              name: My Dataset
              summary: A short description of my dataset.
              description: A longer description of my dataset.
              projectIDs:
              - PlasmoDB
              - ToxoDB
              status:
                import: imported
                install:
                - projectID: PlasmoDB
                  status: failed
                - projectID: ToxoDB
                  status: complete
      400:
        description: |
          Bad Request.
          
          One or more request query parameters were not valid.
        body:
          application/json:
            type: lib.BadRequestError
            example:
              status: bad-request
              message: Invalid project_id value.
      401:
        description: |
          Unauthorized.
          
          This status is returned when the request contains either no user
          authorization token or an invalid user authorization token.
        body:
          application/json:
            type: lib.UnauthorizedError
            example:
              status: unauthorized
              message: Users must be logged in to access this resource.
      500:
        description: |
          Internal Server Error.
          
          This status is returned when an unhandled or unexpected issue arises
          when attempting to process the request.
        body:
          application/json:
            type: lib.ServerError
            example:
              status: server-error
              message: Dataset store is unreachable
              requestId: b296c3d9-4032-41b1-906e-c97ccfc447e3

  post:
    displayName: Upload Dataset
    description: |
      `multipart/form-data` HTTP `POST` request to upload a new dataset.

      Note, the body description below is of the multipart form data fields and
      not of a JSON object.

      The `meta` field, however, is expected to be a JSON blob.
    body:
      multipart/form-data:
        type: lib.DatasetPostRequest
    responses:
      200:
        description: Success
        body:
          type: lib.DatasetPostResponse
          example:
            datasetID: b18dcdf1a19c9415cd6594c00d611699
      400:
        description: |
          Bad Request.
          
          Request body did not resemble the expected JSON form.
        body:
          application/json:
            type: lib.BadRequestError
            example:
              status: bad-request
              message: Invalid project_id value.
      401:
        description: |
          Unauthorized.
          
          This status is returned when the request contains either no user
          authorization token or an invalid user authorization token.
        body:
          application/json:
            type: lib.UnauthorizedError
            example:
              status: unauthorized
              message: Users must be logged in to access this resource.
      422:
        description: |
          Unprocessable Entity.
          
          Request body was syntactically valid JSON, however the body failed
          validation.
        body:
          application/json:
            type: lib.UnprocessableEntityError
      500:
        description: |
          Internal Server Error.
          
          This status is returned when an unhandled or unexpected issue arises
          when attempting to process the request.
        body:
          application/json:
            type: lib.ServerError
            example:
              status: server-error
              message: Dataset store is unreachable
              requestId: b296c3d9-4032-41b1-906e-c97ccfc447e3

/vdi-datasets/rpc:
  displayName: RPC

  /reconcile:
    displayName: Reconciliation
    post:
      displayName: Run Reconciliation
      description: |
        Runs the Dataset Reconciliation process.

        TODO: DESCRIBE THIS PROCESS!
      body:
        application/json:
          type: lib.ReconciliationRequest
          example:
            authorization: 964d72e72d053d501f2949969849b96c31d7c3e829be03400641f80b821ef728
      responses:
        204:
          description: |
            Success.
            
            Reconciliation process completed successfully.
        400:
          description: |
            Bad Request.
            
            Request body did not resemble the expected JSON form.
          body:
            application/json:
              type: lib.BadRequestError
              example:
                status: bad-request
                message: Invalid project_id value.
        401:
          description: |
            Unauthorized.
            
            This status is returned when the request contains either no user
            authorization token or an invalid user authorization token.
          body:
            application/json:
              type: lib.UnauthorizedError
              example:
                status: unauthorized
                message: Users must be logged in to access this resource.
        500:
          description: |
            Internal Server Error.
            
            This status is returned when an unhandled or unexpected issue arises
            when attempting to process the request.
          body:
            application/json:
              type: lib.ServerError
              example:
                status: server-error
                message: Dataset store is unreachable
                requestId: b296c3d9-4032-41b1-906e-c97ccfc447e3

  /install-cleanup:
    displayName: Install Cleanup
    post:
      displayName: Run Install Cleanup
      description: |
        Marks all or target datasets that are in a status of installation
        failure into a ready-for-reinstall status.

        The request body should specify exactly one of `all` or `targets` to
        select whether install cleanup should target all failed datasets across
        all sites, or if install cleanup should target only specific datasets on
        specific sites.

        If the request specifies neither `all` or `targets` the endpoint will do
        nothing.
      body:
        application/json:
          type: lib.InstallCleanupRequest
          examples:
            all:
              displayName: All Example
              value:
                authorization: 7f55a0ed8b021080de00960cc73768fb31d7c3e829be03400641f80b821ef728
                all: true
            targeted:
              displayName: Target Example
              value:
                authorization: 7f55a0ed8b021080de00960cc73768fb31d7c3e829be03400641f80b821ef728
                targets:
                - datasetID: 404a6e35ea5384667d3527e6bd89f3a8
                  projectID: PlasmoDB
      responses:
        204:
          description: |
            Success.
            
            Dataset install cleanup process completed successfully.
        400:
          description: |
            Bad Request.
            
            Request body did not resemble the expected JSON form.
          body:
            application/json:
              type: lib.BadRequestError
              example:
                status: bad-request
                message: Invalid project_id value.
        401:
          description: |
            Unauthorized.
            
            This status is returned when the request contains either no user
            authorization token or an invalid user authorization token.
          body:
            application/json:
              type: lib.UnauthorizedError
              example:
                status: unauthorized
                message: Users must be logged in to access this resource.
        500:
          description: |
            Internal Server Error.
            
            This status is returned when an unhandled or unexpected issue arises
            when attempting to process the request.
          body:
            application/json:
              type: lib.ServerError
              example:
                status: server-error
                message: Dataset store is unreachable
                requestId: b296c3d9-4032-41b1-906e-c97ccfc447e3

  /delete-cleanup:
    displayName: Deleted Dataset Cleanup
    post:
      displayName: Run Deleted Dataset Cleanup
      description: |
        Permanently delete jobs that were soft deleted more than 24 hours prior
        to the execution of this task.
      body:
        application/json:
          type: lib.DeleteCleanupRequest
          example:
            authorization: 26d881d64cac205a140a3329e7fc686ded15d1dce86231a921bad0bd6506af9b
      responses:
        204:
          description: Action completed successfully.
        400:
          description: |
            Bad Request.
            
            Request body did not resemble the expected JSON form.
          body:
            application/json:
              type: lib.BadRequestError
              example:
                status: bad-request
                message: Invalid project_id value.
        401:
          description: |
            Unauthorized.
            
            This status is returned when the request contains either no user
            authorization token or an invalid user authorization token.
          body:
            application/json:
              type: lib.UnauthorizedError
              example:
                status: unauthorized
                message: Users must be logged in to access this resource.
        500:
          description: |
            Internal Server Error.
  
            This status is returned when an unhandled or unexpected issue arises
            when attempting to process the request.
          body:
            application/json:
              type: lib.ServerError
              example:
                status: server-error
                message: Dataset store is unreachable
                requestId: b296c3d9-4032-41b1-906e-c97ccfc447e3

/vdi-datasets/{vd-id}:
  displayName: Dataset by ID

  uriParameters:
    vd-id: lib.VDI-ID

  get:
    displayName: Lookup Dataset
    description: |
      Fetch details about a dataset and its status(es).
    responses:
      200:
        description: Target dataset was located and returned.
        body:
          type: lib.DatasetDetails
          example:
            datasetID: b18dcdf1a19c9415cd6594c00d611699
            owner:
              userID: 123456
              displayName: Joe User
              organization: University of Joe
            datasetType:
              name: ISA
              version: "1.0"
            name: My Dataset
            summary: A short description of my dataset.
            description: A longer description of my dataset.
            projectIDs:
            - PlasmoDB
            - ToxoDB
            importMessages:
            - Import warning 1
            - Import warning 2
            installMessages:
              PlasmoDB:
              - Install warning 1
              - Install warning 2
              - Install Error
            status:
              import: imported
              install:
              - projectID: PlasmoDB
                status: failed
              - projectID: ToxoDB
                status: complete
      401:
        description: |
          Unauthorized.
          
          This status is returned when the request contains either no user
          authorization token or an invalid user authorization token.
        body:
          application/json:
            type: lib.UnauthorizedError
            example:
              status: unauthorized
              message: Users must be logged in to access this resource.
      404:
        description: |
          Target dataset was not located or is not visible to the requesting
          user.
        body: lib.NotFoundError
      500:
        description: |
          Internal Server Error.

          This status is returned when an unhandled or unexpected issue arises
          when attempting to process the request.
        body:
          application/json:
            type: lib.ServerError
            example:
              status: server-error
              message: Dataset store is unreachable
              requestId: b296c3d9-4032-41b1-906e-c97ccfc447e3

  patch:
    displayName: Update Dataset
    description: |
      Updates the metadata for a target dataset.
    body:
      application/json:
        type: lib.DatasetPatchRequest
        example:
          name: My Dataset
          summary: A short summary of my dataset.
          description: A longer description of my dataset.
    responses:
      204:
        description: Target dataset metadata was updated.
      400:
        description: |
          Bad Request.
          
          Request body did not resemble the expected JSON form.
        body:
          application/json:
            type: lib.BadRequestError
            example:
              status: bad-request
              message: Invalid project_id value.
      401:
        description: |
          Unauthorized.
          
          This status is returned when the request contains either no user
          authorization token or an invalid user authorization token.
        body:
          application/json:
            type: lib.UnauthorizedError
            example:
              status: unauthorized
              message: Users must be logged in to access this resource.
      403:
        description: |
          Action Forbidden.
          
          Target dataset is not owned by the requesting user.
        body: lib.ForbiddenError
      404:
        description: Target dataset was not found.
        body: lib.NotFoundError
      422:
        description: |
          Unprocessable Entity.
          
          Request body was syntactically valid JSON, however the body failed
          validation.
        body: lib.UnprocessableEntityError
      500:
        description: |
          Internal Server Error.

          This status is returned when an unhandled or unexpected issue arises
          when attempting to process the request.
        body:
          application/json:
            type: lib.ServerError
            example:
              status: server-error
              message: Dataset store is unreachable
              requestId: b296c3d9-4032-41b1-906e-c97ccfc447e3

  delete:
    displayName: Delete Dataset
    description: |
      Marks the target dataset as deleted.

      Datasets that have been marked as deleted are still recoverable for a
      short period of time before they are permanently deleted from the system.
    responses:
      204:
        description: Target dataset was marked as deleted.
      401:
        description: |
          Unauthorized.
          
          This status is returned when the request contains either no user
          authorization token or an invalid user authorization token.
        body:
          application/json:
            type: lib.UnauthorizedError
            example:
              status: unauthorized
              message: Users must be logged in to access this resource.
      403:
        description: |
          Action Forbidden.
          
          Target dataset is not owned by the requesting user.
        body: lib.ForbiddenError
      404:
        description: Target dataset was not located.
        body: lib.NotFoundError
      500:
        description: |
          Internal Server Error.

          This status is returned when an unhandled or unexpected issue arises
          when attempting to process the request.
        body:
          application/json:
            type: lib.ServerError
            example:
              status: server-error
              message: Dataset store is unreachable
              requestId: b296c3d9-4032-41b1-906e-c97ccfc447e3

/vdi-datasets/{vd-id}/shares/{user-id}:
  displayName: Dataset Sharing

  uriParameters:
    vd-id: lib.VDI-ID
    user-id:
      displayName: Recipient User ID
      type: lib.User-ID

  /offer:
    displayName: Share Offers

    put:
      displayName: Offer to Share a Dataset
      description: |
        `PUT` a record that is either an offer to share a dataset with another
        target user, or the revocation of an existing open share offer with a
        target user.
      body:
        application/json:
          type: lib.DatasetShareOffer
          examples:
            grant:
              displayName: Grant Example
              value:
                action: grant
            revoke:
              displayName: Revoke Example
              value:
                action: revoke
      responses:
        204:
          description: Share offer record was successfully (re)placed.
        400:
          description: |
            Bad Request.
            
            Request body did not resemble the expected JSON form.
          body:
            application/json:
              type: lib.BadRequestError
              example:
                status: bad-request
                message: Invalid project_id value.
        401:
          description: |
            Unauthorized.
            
            This status is returned when the request contains either no user
            authorization token or an invalid user authorization token.
          body:
            application/json:
              type: lib.UnauthorizedError
              example:
                status: unauthorized
                message: Users must be logged in to access this resource.
        403:
          description: |
            Action Forbidden.
            
            This status is returned when the dataset target of the operation is
            not owned by the requesting user, thus the requesting user is
            forbidden from offering shares to the dataset.
          body: lib.ForbiddenError
        404:
          description: |
            Not Found.
            
            Either the target dataset or target user was not found.
        422:
          description: |
            Unprocessable Entity.
            
            Request body was syntactically valid JSON, however the body failed
            validation.
          body: lib.UnprocessableEntityError
        500:
          description: |
            Internal Server Error.

            This status is returned when an unhandled or unexpected issue arises
            when attempting to process the request.
          body:
            application/json:
              type: lib.ServerError
              example:
                status: server-error
                message: Dataset store is unreachable
                requestId: b296c3d9-4032-41b1-906e-c97ccfc447e3

  /receipt:
    displayName: Share Receipts

    put:
      displayName: Receive a dataset Share
      description: |
        `PUT` a receipt of a dataset share offer, marking the share offer as
        either `accepted` or `rejected`.
      body:
        application/json:
          type: lib.DatasetShareReceipt
          examples:
            accept:
              displayName: Accept Example
              value:
                action: accept
            reject:
              displayName: Reject Example
              value:
                action: reject
      responses:
        204:
          description: Share offer receipt record was successfully created.
        400:
          description: |
            Bad Request.
            
            Request body did not resemble the expected JSON form.
          body:
            application/json:
              type: lib.BadRequestError
              example:
                status: bad-request
                message: Invalid project_id value.
        401:
          description: |
            Unauthorized.
            
            This status is returned when the request contains either no user
            authorization token or an invalid user authorization token.
          body:
            application/json:
              type: lib.UnauthorizedError
              example:
                status: unauthorized
                message: Users must be logged in to access this resource.
        403:
          description: |
            Action Forbidden.
            
            This status is returned when the requesting user is not the target
            user and/or the target user was not offered a share for the target
            dataset.
        404:
          description: |
            Not Found.
            
            This status is returned when the target dataset does not exist.
          body: lib.NotFoundError
        422:
          description: |
            Unprocessable Entity.
            
            Request body was syntactically valid JSON, however the body failed
            validation.
          body: lib.UnprocessableEntityError
        500:
          description: |
            Internal Server Error.

            This status is returned when an unhandled or unexpected issue arises
            when attempting to process the request.
          body:
            application/json:
              type: lib.ServerError
              example:
                status: server-error
                message: Dataset store is unreachable
                requestId: b296c3d9-4032-41b1-906e-c97ccfc447e3

/vdi-datasets/share-offers:
  displayName: Share Offers

  get:
    displayName: List Share Offers
    description: |
      Lists the open share offers available to the requesting user.
      
      An open share offer is an offer that has not yet been accepted or rejected
      by the recipient user.
    queryParameters:
      status:
        displayName: Share Status
        description: |
          Controls the results by filtering them to only shares that are in the
          specified target status.
          
          Valid `status` values are:
          
          - `open`
          - `accepted`
          - `rejected`
          - `all`
          
          These status values mean:
          
          <table>
            <tr>
              <th>Status</th>
              <th>Description</th>
            </tr>
            <tr>
              <td>`open`</td>
              <td>Only return share offers that have not yet been accepted or
                  rejected.</td>
            </tr>
            <tr>
              <td>`accepted`</td>
              <td>Only return share offers that have been accepted by the          
                  requesting user.</td>
            </tr>
            <tr>
              <td>`rejected`</td>
              <td>Only return share offers that have been rejected by the
                  requesting user.</td>
            </tr>
            <tr>
              <td>`all`</td>
              <td>Return all share offers regardless of whether they have been
                  acknowledged, accepted, or rejected.</td>
            </tr>
          </table>
        type: string
        required: false
        default: open
    responses:
      200:
        description: |
          Success.
          
          A list of zero or more dataset shares were found for the requesting
          user.
        body:
          type: lib.ShareOfferEntry[]
      400:
        description: |
          Bad Request.
          
          This response is returned when the `status` query parameter was
          provided but was an invalid value.
        body:
          application/json:
            type: lib.BadRequestError
            example:
              status: bad-request
              message: Invalid status value.
      401:
        description: |
          Unauthorized.
          
          This response is returned when the request either contained an invalid
          user authorization token, or did not contain a user authorization
          token at all.
        body:
          application/json:
            type: lib.UnauthorizedError
            example:
              status: unauthorized
              message: Users must be logged in to access this resource.
      500:
        description: |
          Internal Server Error.

          This response is returned when an unhandled or unexpected issue arises
          when attempting to process the request.
        body:
          application/json:
            type: lib.ServerError
            example:
              status: server-error
              message: Dataset store is unreachable
              requestId: b296c3d9-4032-41b1-906e-c97ccfc447e3


# TODO: what happens when a user attempts to share a dataset that failed installation?
#       we should probably reject it with a 403
# TODO: Endpoint that lists open share offers to a user
# TODO: dataset details should list open share offers to other users
# TODO: Shares should be automatically accepted
# TODO: Some notification needs to be sent out when a share is made (email or something)