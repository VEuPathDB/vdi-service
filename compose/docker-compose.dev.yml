name: "vdi"

networks:
  monitoring-ext:
    external: false
  rabbitmq:
    external: false
  traefik:
    external: false

services:
  cache-db:
    ports:
    - "5432:5432"
    environment:
      POSTGRES_USER: vdi
      POSTGRES_PASSWORD: pgPass
      POSTGRES_DB: vdi

  kafka:
    ports:
    - "9092:9092"

  minio-create-buckets:
    image: veupathdb/minio-mc
    depends_on:
      minio-external:
        condition: service_started
      rabbit-external:
        condition: service_started
    networks:
    - internal
    entrypoint: >
      /bin/sh -c "
      while ! nc -zv minio-external 9000; do sleep 3; done;
      mc alias set minioc http://minio-external:9000 minioUser minioPass;
      mc mb minioc/vdi;
      mc policy set public minioc/vdi;
      mc event add minioc/vdi arn:minio:sqs::RABBIT:amqp --event put,delete,replica;
      exit 0;
      "

  minio-external:
    image: veupathdb/minio
    depends_on:
    - rabbit-external
    links:
    - rabbit-external
    ports:
    - "9000:9000"
    - "9001:9001"
    networks:
    - internal
    - rabbitmq
    environment:
      MINIO_ROOT_USER: minioUser
      MINIO_ROOT_PASSWORD: minioPass

      MINIO_NOTIFY_AMQP_ENABLE_RABBIT: "on"
      MINIO_NOTIFY_AMQP_URL_RABBIT: amqp://rabbitUser:rabbitPass@rabbit-external:5672
      MINIO_NOTIFY_AMQP_EXCHANGE_RABBIT: vdi-bucket-notifications
      MINIO_NOTIFY_AMQP_EXCHANGE_TYPE_RABBIT: direct
      MINIO_NOTIFY_AMQP_ROUTING_KEY_RABBIT: vdi-bucket-notifications
      MINIO_NOTIFY_AMQP_DELIVERY_MODE_RABBIT: 2
      MINIO_NOTIFY_AMQP_DURABLE_RABBIT: "on"

    entrypoint: >
      /bin/sh -c "
      while ! nc -zv rabbit-external 5672; do sleep 3; done;
      minio server --console-address ':9001' /data;
      "

  plugin-example:
    image: veupathdb/vdi-plugin-example:${VDI_PLUGIN_EXAMPLE_TAG:-latest}

    networks:
      internal:
        aliases:
        - example
      monitoring-ext: {}

    volumes:
    - type: bind
      source: ${DATASET_INSTALL_DIR_LOCAL_PATH}
      target: /datasets

    environment:
#      LDAP_SERVER: ${LDAP_SERVER}
#      ORACLE_BASE_DN: ${DB_LOOKUP_BASE_DN}
#      CUSTOM_PATH: ${PLUGIN_HANDLER_NOOP_CUSTOM_PATH}
#      SITE_BUILD: ${SITE_BUILD}
#      DATASET_INSTALL_ROOT: /datasets
#
#      AMOEBA_LDAP: ${AMOEBA_LDAP}
#      CLINEPI_LDAP: ${CLINEPI_LDAP}
#      CRYPTO_LDAP: ${CRYPTO_LDAP}
#      FUNGI_LDAP: ${FUNGI_LDAP}
#      GIARDIA_LDAP: ${GIARDIA_LDAP}
#      HOST_LDAP: ${HOST_LDAP}
#      MICROBIOME_LDAP: ${MICROBIOME_LDAP}
#      MICROSPORIDIA_LDAP: ${MICROSPORIDIA_LDAP}
#      ORTHO_LDAP: ${ORTHO_LDAP}
#      PIROPLASMA_LDAP: ${PIROPLASMA_LDAP}
#      PLASMO_LDAP: ${PLASMO_LDAP}
#      TOXO_LDAP: ${TOXO_LDAP}
#      TRICH_LDAP: ${TRICH_LDAP}
#      TRITRYP_LDAP: ${TRITRYP_LDAP}
#      VECTOR_LDAP: ${VECTOR_LDAP}
      LDAP_SERVER: ${LDAP_SERVER}
      ORACLE_BASE_DN: ${DB_LOOKUP_BASE_DN}
      CUSTOM_PATH: ${PLUGIN_HANDLER_GENELIST_CUSTOM_PATH}
      SITE_BUILD: ${SITE_BUILD}
      DATASET_INSTALL_ROOT: /datasets

      DB_CONNECTION_ENABLED_MICROBIOME: true
      DB_CONNECTION_NAME_MICROBIOME: MicrobiomeDB
      DB_CONNECTION_LDAP_MICROBIOME: eda-inc
      DB_CONNECTION_PASS_MICROBIOME: nothing
      DB_CONNECTION_DATA_SCHEMA_MICROBIOME: vdi_dev_control_n
      DB_CONNECTION_CONTROL_SCHEMA_MICROBIOME: vdi_dev_data_n

  rabbit-external:
    image: rabbitmq:3.11.13-management-alpine
    ports:
    - "5672:5672"
    - "9002:15672"
    networks:
    - rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: rabbitUser
      RABBITMQ_DEFAULT_PASS: rabbitPass

  phony-app-db:
    image: phony-app-db
    build:
      context: dev/
      dockerfile: phony-app-db.dockerfile
    ports:
    - "1521:5432"
    networks:
    - internal
    environment:
      POSTGRES_DB: vdi
      POSTGRES_USER: testUsername
      POSTGRES_PASSWORD: testPassword

  service:
    build:
      context: ../
      dockerfile: project/core/Dockerfile
      args:
        GITHUB_USERNAME: ${GITHUB_USERNAME}
        GITHUB_TOKEN: ${GITHUB_TOKEN}
    depends_on:
      minio-external:
        condition: service_started
      minio-create-buckets:
        condition: service_completed_successfully
      rabbit-external:
        condition: service_started
    links:
    - rabbit-external
    - minio-external
    ports:
    - "8080:80"
    environment:
      AMOEBA_ENABLED: ${AMOEBA_ENABLED:-false}
      CLINEPI_ENABLED: ${CLINEPI_ENABLED:-false}
      CRYPTO_ENABLED: ${CRYPTO_ENABLED:-false}
      FUNGI_ENABLED: ${FUNGI_ENABLED:-false}
      GIARDIA_ENABLED: ${GIARDIA_ENABLED:-false}
      HOST_ENABLED: ${HOST_ENABLED:-false}
      MICROBIOME_ENABLED: ${MICROBIOME_ENABLED:-false}
      MICROSPORIDIA_ENABLED: ${MICROSPORIDIA_ENABLED:-false}
      ORTHO_ENABLED: ${ORTHO_ENABLED:-false}
      PIROPLASMA_ENABLED: ${PIROPLASMA_ENABLED:-false}
      PLASMO_ENABLED: ${PLASMO_ENABLED:-false}
      TOXO_ENABLED: ${TOXO_ENABLED:-false}
      TRICH_ENABLED: ${TRICH_ENABLED:-false}
      TRITRYP_ENABLED: ${TRITRYP_ENABLED:-false}
      VECTOR_ENABLED: ${VECTOR_ENABLED:-false}
    labels:
      traefik.http.services.vdi-dev.loadbalancer.server.port: "80"
      traefik.http.routers.vdi-dev.rule: "Host(`vdi.local.apidb.org}`)"
      traefik.http.routers.vdi-dev.tls: "false"
      traefik.http.routers.vdi-dev.entrypoints: "local"
      traefik.docker.network: "traefik"
