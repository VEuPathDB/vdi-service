# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
#   Docker Compose
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# Image Versions
VDI_SERVICE_TAG=latest
VDI_CACHE_DB_TAG=latest
VDI_KAFKA_TAG=3.4.0

VDI_PLUGIN_EXAMPLE_TAG=latest


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
#   Modules
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #


# # # # # # # # # # # # # # # # # # # # # #
#
#   Rest Service
#
# # # # # # # # # # # # # # # # # # # # # #

# Exposed HTTP port for the rest service.
VDI_SERVICE_HTTP_PORT=80

# Authentication secret key/salt
AUTH_SECRET_KEY=

# LDAP server(s) that will be used to lookup oracle connection details.
LDAP_SERVER=

# Base DN used in LDAP queries for Oracle connection details
ORACLE_BASE_DN=ou=applications,dc=apidb,dc=org

# Account database connection details
ACCT_DB_TNS_NAME=acctdbn
ACCT_DB_USERNAME=
ACCT_DB_PASSWORD=
ACCT_DB_POOL_SIZE=5

# User database connection details
USER_DB_TNS_NAME=apicommn
USER_DB_USERNAME=
USER_DB_PASSWORD=
USER_DB_POOL_SIZE=5


# # # # # # # # # # # # # # # # # # # # # #
#
#   Hard Delete Trigger Handler
#
# Configuration details specific to the
# dataset hard deletion event handler
# module.
#
# # # # # # # # # # # # # # # # # # # # # #

# Kafka client ID for the hard delete trigger handler's Kafka consumer client.
HARD_DELETE_HANDLER_KAFKA_CONSUMER_CLIENT_ID=hard-delete-handler

# How many workers should the hard delete handler module spin up to handle
# dataset hard deletion triggers.
HARD_DELETE_HANDLER_WORKER_POOL_SIZE=1

# How many unprocessed events can be waiting in the hard delete handler module's
# worker pool job queue before the handler stops fetching more trigger events.
HARD_DELETE_HANDLER_WORK_QUEUE_SIZE=100


# # # # # # # # # # # # # # # # # # # # # #
#
#   Import Trigger Handler
#
# Configuration details specific to the
# dataset import event handler module.
#
# # # # # # # # # # # # # # # # # # # # # #

# Kafka client ID for the import trigger handler's Kafka consumer client.
IMPORT_HANDLER_KAFKA_CONSUMER_CLIENT_ID=import-handler

# How many workers should the import handler module spin up to handle dataset
# import triggers.
IMPORT_HANDLER_WORKER_POOL_SIZE=10

# How many unprocessed events can be waiting in the import handler module's
# worker pool job queue before the handler stops fetching more trigger events.
IMPORT_HANDLER_WORK_QUEUE_SIZE=5


# # # # # # # # # # # # # # # # # # # # # #
#
#   Install Data Trigger Handler
#
# Configuration details specific to the
# dataset installation event handler
# module.
#
# # # # # # # # # # # # # # # # # # # # # #

# Kafka client ID for the install-data trigger handler's Kafka consumer client.
INSTALL_DATA_HANDLER_KAFKA_CONSUMER_CLIENT_ID=install-data-handler

# How many workers should the install module spin up to handle dataset install
# triggers.
INSTALL_DATA_HANDLER_WORKER_POOL_SIZE=5

# How many unprocessed events can be waiting in the install-data handler
# module's worker pool job queue before the handler stops fetching more trigger
# events.
INSTALL_DATA_WORK_QUEUE_SIZE=5


# # # # # # # # # # # # # # # # # # # # # #
#
#   Pruner
#
# Configuration details specific to the
# pruner module.
#
# # # # # # # # # # # # # # # # # # # # # #

# Age at which a soft-deleted dataset becomes a candidate for pruning from the
# VDI system.
DATASET_PRUNING_DELETION_THRESHOLD=5d

# Frequency at which the pruner will run automatically.
DATASET_PRUNING_INTERVAL=6h

# Interval at which the pruner module should wake up and check for a service
# shutdown signal.  Unless a pruning job is actively running, this value
# controls the maximum wait time for the module to stop after a shutdown has
# been requested.
DATASET_PRUNING_WAKEUP_INTERVAL=5s


# # # # # # # # # # # # # # # # # # # # # #
#
#   Share Trigger Handler
#
# Configuration details specific to the
# dataset share event handler module.
#
# # # # # # # # # # # # # # # # # # # # # #

# Kafka Client ID for the share trigger handler's Kafka consumer client.
SHARE_HANDLER_KAFKA_CONSUMER_CLIENT_ID=share-handler

# How many workers should the share handler module spin up to handle dataset
# share triggers.
SHARE_HANDLER_WORKER_POOL_SIZE=10

# How many unprocessed events can be waiting in the share handler module's
# worker pool job queue before the handler stops fetching more trigger events.
SHARE_HANDLER_WORK_QUEUE_SIZE=5


# # # # # # # # # # # # # # # # # # # # # #
#
#   Soft Delete Trigger Handler
#
# Configuration details specific to the
# dataset soft delete event handler module.
#
# # # # # # # # # # # # # # # # # # # # # #

# Kafka client ID for the soft delete trigger handler's Kafka consumer client.
SOFT_DELETE_HANDLER_KAFKA_CONSUMER_CLIENT_ID=soft-delete-handler

# How many workers should the soft-delete handler module spin up to handle
# dataset soft delete triggers.
SOFT_DELETE_HANDLER_WORKER_POOL_SIZE=10

# How many unprocessed events can be waiting in the soft delete handler module's
# worker pool job queue before the handler stops fetching more trigger events.
SOFT_DELETE_HANDLER_WORK_QUEUE_SIZE=5


# # # # # # # # # # # # # # # # # # # # # #
#
#   Update Meta Trigger Handler
#
# Configuration details specific to the
# update metadata event handler module.
#
# # # # # # # # # # # # # # # # # # # # # #

# Kafka client ID for the update meta trigger handler's Kafka consumer client.
UPDATE_META_HANDLER_KAFKA_CONSUMER_CLIENT_ID=update-meta-handler

# How many workers should the update meta handler module spin up to handle
# dataset metadata update triggers.
UPDATE_META_HANDLER_WORKER_POOL_SIZE=10

# How many unprocessed events can be waiting in the update meta handler module's
# worker pool job queue before the handler stops fetching more trigger events.
UPDATE_META_HANDLER_WORK_QUEUE_SIZE=5


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
#   Components
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #


# # # # # # # # # # # # # # # # # # # # # #
#
#   Cache DB
#
# # # # # # # # # # # # # # # # # # # # # #

CACHE_DB_USERNAME=someUser
CACHE_DB_PASSWORD=somePassword
CACHE_DB_HOST=queue-postgres
CACHE_DB_PORT=5432
CACHE_DB_POOL_SIZE=5


# # # # # # # # # # # # # # # # # # # # # #
#
#   Kafka
#
# # # # # # # # # # # # # # # # # # # # # #

KAFKA_SERVERS=kafka:9092
KAFKA_CONSUMER_GROUP_ID=vdi-kafka-consumers
KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092

# TODO: This should be split into separate producer client IDs for all modules that produce kafka messages.
KAFKA_PRODUCER_CLIENT_ID=vdi-event-router

KAFKA_TOPIC_HARD_DELETE_TRIGGERS=hard-delete-triggers
KAFKA_TOPIC_IMPORT_TRIGGERS=import-triggers
KAFKA_TOPIC_INSTALL_TRIGGERS=install-triggers
KAFKA_TOPIC_SHARE_TRIGGERS=share-triggers
KAFKA_TOPIC_SOFT_DELETE_TRIGGERS=soft-delete-triggers
KAFKA_TOPIC_UPDATE_META_TRIGGERS=update-meta-triggers

KAFKA_MESSAGE_KEY_HARD_DELETE_TRIGGERS=hard-delete-trigger
KAFKA_MESSAGE_KEY_IMPORT_TRIGGERS=import-trigger
KAFKA_MESSAGE_KEY_INSTALL_TRIGGERS=install-trigger
KAFKA_MESSAGE_KEY_SHARE_TRIGGERS=share-trigger
KAFKA_MESSAGE_KEY_SOFT_DELETE_TRIGGERS=soft-delete-trigger
KAFKA_MESSAGE_KEY_UPDATE_META_TRIGGERS=update-meta-trigger


# # # # # # # # # # # # # # # # # # # # # #
#
#   Rabbit
#
# # # # # # # # # # # # # # # # # # # # # #

# Name of the connection to the RabbitMQ service.  This value will show in the
# RabbitMQ logs and management console to identify the VDI service's connection.
GLOBAL_RABBIT_CONNECTION_NAME=vdi

# Hostname of the global RabbitMQ instance that the VDI service will connect to.
GLOBAL_RABBIT_HOST=rabbit-external

# Port to use when connecting to the global RabbitMQ instance.
GLOBAL_RABBIT_PORT=5672

# Credentials username used to authenticate with the global RabbitMQ instance.
GLOBAL_RABBIT_USERNAME=someUser

# Credentials password used to authenticate with the global RabbitMQ instance.
GLOBAL_RABBIT_PASSWORD=somePassword

# Frequency that the global RabbitMQ instance will be polled for new messages
# from MinIO.
GLOBAL_RABBIT_VDI_POLLING_INTERVAL=1s


# Name of the target RabbitMQ exchange that will be declared by both the MinIO
# instance and the VDI service.
#
# THIS VALUE MUST BE THE SAME AS THE VALUE CONFIGURED IN MINIO.
GLOBAL_RABBIT_VDI_EXCHANGE_NAME=vdi-bucket-notifications

# Exchange type as declared bt the MinIO connection to the global RabbitMQ
# instance.
#
# THIS VALUE MUST BE THE SAME AS THE VALUE CONFIGURED IN MINIO.
GLOBAL_RABBIT_VDI_EXCHANGE_TYPE=direct

# Whether the exchange should be auto deleted when the connections from MinIO
# and the VDI service are closed.
#
# THIS VALUE MUST BE THE SAME AS THE VALUE CONFIGURED IN MINIO.
GLOBAL_RABBIT_VDI_EXCHANGE_AUTO_DELETE=false

# Whether the exchange should be durable (persisted to disk).
#
# THIS VALUE MUST BE THE SAME AS THE VALUE CONFIGURED IN MINIO.
GLOBAL_RABBIT_VDI_EXCHANGE_DURABLE=true

# Additional arguments to pass to the exchange declaration.
#GLOBAL_RABBIT_VDI_EXCHANGE_ARGUMENTS=an:argument,another:argument


# Name of the RabbitMQ queue to declare.
#
# THIS VALUE MUST BE THE SAME AS THE VALUE CONFIGURED IN MINIO.
GLOBAL_RABBIT_VDI_QUEUE_NAME=vdi-bucket-notifications

# Whether the queue should be auto deleted when the connections from MinIO and
# the VDI service are closed.
#
# THIS VALUE MUST BE THE SAME AS THE VALUE CONFIGURED IN MINIO.
GLOBAL_RABBIT_VDI_QUEUE_AUTO_DELETE=false

# Whether the queue should be declared as exclusive to the VDI service.  This
# value should always be `false` under normal circumstances.
GLOBAL_RABBIT_VDI_QUEUE_EXCLUSIVE=false

# Whether the queue should be durable (persisted to disk).
#
# THIS VALUE MUST BE THE SAME AS THE VALUE CONFIGURED IN MINIO.
GLOBAL_RABBIT_VDI_QUEUE_DURABLE=true

# Additional arguments to pass to the queue declaration.
#GLOBAL_RABBIT_VDI_QUEUE_ARGUMENTS=an:argument,another:argument

GLOBAL_RABBIT_VDI_ROUTING_KEY=vdi-bucket-notifications
#GLOBAL_RABBIT_VDI_ROUTING_ARGUMENTS=an:argument,another:argument


# # # # # # # # # # # # # # # # # # # # # #
#
#   MinIO (S3)
#
# # # # # # # # # # # # # # # # # # # # # #

S3_BUCKET=some-bucket
S3_HOST=minio-external
S3_PORT=9000
S3_USE_HTTPS=true
S3_ACCESS_TOKEN=someToken
S3_SECRET_KEY=someSecretKey


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
#   VDI Plugin Declarations
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #


# No-Op Plugin
PLUGIN_HANDLER_NOOP_NAME=noop
PLUGIN_HANDLER_NOOP_ADDRESS=plugin-example:80
PLUGIN_HANDLER_NOOP_PROJECT_IDS=PlasmoDB


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
#   Application Database Declarations
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

DB_CONNECTION_NAME_AMOEBA=AmoebaDB
DB_CONNECTION_LDAP_AMOEBA=ameb063n
DB_CONNECTION_USER_AMOEBA=someDBUser
DB_CONNECTION_PASS_AMOEBA=someDBPass
DB_CONNECTION_POOL_SIZE_AMOEBA=5

DB_CONNECTION_NAME_CRYPTO=CryptoDB
DB_CONNECTION_LDAP_CRYPTO=cryp063n
DB_CONNECTION_USER_CRYPTO=someDBUser
DB_CONNECTION_PASS_CRYPTO=someDBPass
DB_CONNECTION_POOL_SIZE_CRYPTO=5

DB_CONNECTION_NAME_FUNGI=FungiDB
DB_CONNECTION_LDAP_FUNGI=fung063n
DB_CONNECTION_USER_FUNGI=someDBUser
DB_CONNECTION_PASS_FUNGI=someDBPass
DB_CONNECTION_POOL_SIZE_FUNGI=5

DB_CONNECTION_NAME_GIARDIA=GiardiaDB
DB_CONNECTION_LDAP_GIARDIA=giar063n
DB_CONNECTION_USER_GIARDIA=someDBUser
DB_CONNECTION_PASS_GIARDIA=someDBPass
DB_CONNECTION_POOL_SIZE_GIARDIA=5

DB_CONNECTION_NAME_HOST=HostDB
DB_CONNECTION_LDAP_HOST=host063n
DB_CONNECTION_USER_HOST=someDBUser
DB_CONNECTION_PASS_HOST=someDBPass
DB_CONNECTION_POOL_SIZE_HOST=5

DB_CONNECTION_NAME_MICROSPORIDIA=MicrosporidiaDB
DB_CONNECTION_LDAP_MICROSPORIDIA=micr063n
DB_CONNECTION_USER_MICROSPORIDIA=someDBUser
DB_CONNECTION_PASS_MICROSPORIDIA=someDBPass
DB_CONNECTION_POOL_SIZE_MICROSPORIDIA=5

DB_CONNECTION_NAME_PIROPLASMA=PiroplasmaDB
DB_CONNECTION_LDAP_PIROPLASMA=piro063n
DB_CONNECTION_USER_PIROPLASMA=someDBUser
DB_CONNECTION_PASS_PIROPLASMA=someDBPass
DB_CONNECTION_POOL_SIZE_PIROPLASMA=5

DB_CONNECTION_NAME_PLASMO=PlasmoDB
DB_CONNECTION_LDAP_PLASMO=plas063n
DB_CONNECTION_USER_PLASMO=someDBUser
DB_CONNECTION_PASS_PLASMO=someDBPass
DB_CONNECTION_POOL_SIZE_PLASMO=5

DB_CONNECTION_NAME_TOXO=ToxoDB
DB_CONNECTION_LDAP_TOXO=toxo063n
DB_CONNECTION_USER_TOXO=someDBUser
DB_CONNECTION_PASS_TOXO=someDBPass
DB_CONNECTION_POOL_SIZE_TOXO=5

DB_CONNECTION_NAME_TRICH=TrichDB
DB_CONNECTION_LDAP_TRICH=tvag063n
DB_CONNECTION_USER_TRICH=someDBUser
DB_CONNECTION_PASS_TRICH=someDBPass
DB_CONNECTION_POOL_SIZE_TRICH=5

DB_CONNECTION_NAME_TRITRYP=TriTrypDB
DB_CONNECTION_LDAP_TRITRYP=tryp063n
DB_CONNECTION_USER_TRITRYP=someDBUser
DB_CONNECTION_PASS_TRITRYP=someDBPass
DB_CONNECTION_POOL_SIZE_TRITRYP=5

DB_CONNECTION_NAME_VECTOR=VectorBase
DB_CONNECTION_LDAP_VECTOR=vect063n
DB_CONNECTION_USER_VECTOR=someDBUser
DB_CONNECTION_PASS_VECTOR=someDBPass
DB_CONNECTION_POOL_SIZE_VECTOR=5

DB_CONNECTION_NAME_ORTHO=OrthoMCL
DB_CONNECTION_LDAP_ORTHO=orth063n
DB_CONNECTION_USER_ORTHO=someDBUser
DB_CONNECTION_PASS_ORTHO=someDBPass
DB_CONNECTION_POOL_SIZE_ORTHO=5

DB_CONNECTION_NAME_CLINEPI=ClinEpiDB
DB_CONNECTION_LDAP_CLINEPI=eda063n
DB_CONNECTION_USER_CLINEPI=someDBUser
DB_CONNECTION_PASS_CLINEPI=someDBPass
DB_CONNECTION_POOL_SIZE_CLINEPI=5

DB_CONNECTION_NAME_MICROBIOME=MicrobiomeDB
DB_CONNECTION_LDAP_MICROBIOME=mbio061n
DB_CONNECTION_USER_MICROBIOME=someDBUser
DB_CONNECTION_PASS_MICROBIOME=someDBPass
DB_CONNECTION_POOL_SIZE_MICROBIOME=5
