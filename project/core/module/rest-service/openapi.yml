openapi: "3.1.0"
jsonSchemaDialect: https://spec.openapis.org/oas/3.1/dialect/base

info:
  title: VEuPathDB Dataset Installer
  version: "1.7.0"
  license:
    name: Apache 2.0
    identifier: Apache-2.0

servers:
- description: Active Instance
  url: https://veupathdb.org/vdi
- description: UGA Instance
  url: https://w1.veupathdb.org/vdi
- description: UPenn Instance
  url: https://w2.veupathdb.org/vdi

tags:
- name: dataset
  description: Dataset resource API operations.

paths:
  /datasets:
    get:
      tags: [ dataset ]
      operationId: getDatasetList
      summary: List Datasets
      parameters:
      - name: project_id
        # language=markdown
        description: |-
          Project ID filter.

          ID of the VEuPathDB project that results should be filtered to.

          This means only datasets that are relevant to the project ID given
          will be returned.

          Additionally, this controls the sites on which the dataset
          installation status will be checked. Meaning, if this parameter is
          specified and set to, for example, `PlasmoDB`, the status block in the
          response objects will only include installation status details for
          `PlasmoDB` and not any other sites that the dataset may have been
          installed into.

          This is desirable for UI-based client use to improve request
          processing time by the service.
        in: query
        required: false
        schema: { $ref: "api-schema/types/common/fields/install-target.json" }
      - name: ownership
        in: query
        required: false
        # language=markdown
        description: |-
          Ownership status filter.

          Enum of:

          * `any`
          * `owned`
          * `shared`

          If set to `any` the results are not filtered.

          If set to `owned`, the results will be filtered to only results that
          are owned by the requesting user.

          If set to `shared`, the results will be filtered to only results that
          are shared with the requesting user.
        schema:
          type: string
          enum:
          - any
          - owned
          - shared
          default: any
      # language=markdown
      description: |-
        Returns a list of datasets available to the requesting user, optionally
        filtered by query parameters.

        Results are sorted by creation date in reverse order. This means the
        most recently created datasets will be first and the oldest dataset will
        be last in the list.
      responses:
        200:
          description: List of objects containing basic dataset details.
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "api-schema/types/responses/datasets/list-datasets.json" }
        400: { $ref: "#/components/responses/400" }
        401: { $ref: "#/components/responses/401" }
        500: { $ref: "#/components/responses/500" }

    post:
      tags: [ dataset ]
      operationId: createDataset
      summary: Create New Dataset
      # language=markdown
      description: |-
        `multipart/form-data` HTTP `POST` request to upload a new dataset.

        Note, the root of the body description below is of the multipart form data
        fields and not of a literal JSON object.
      
        The `meta` field, however, _is_ expected to be a JSON object.
      
        The `file` field may be one of:
      
        * a raw data file to import
        * a `.zip` file containing one or more files to import
        * a `.tar.gz` or `.tgz` file containing one or more files to import.
      
        The `url` field may point to a file that is one of the allowed upload types.
      
        The `url` and `file` fields cannot both be used at the same time, one must
        be used or the other.  Providing both fields will result in a 4xx range error
        response.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema: { $ref: "api-schema/types/requests/datasets/create-dataset.json" }
      responses:
        201:
          description: Dataset successfully submitted for processing.
          headers:
            Location: { $ref: "#/components/headers/location" }
          content:
            application/json:
              schema:
                type: object
                properties:
                  datasetId: { $ref: "api-schema/types/common/dataset/dataset-id.json" }
                required:
                - datasetId
                unevaluatedProperties: false
        400: { $ref: "#/components/responses/400" }
        401: { $ref: "#/components/responses/401" }
        422: { $ref: "#/components/responses/422" }
        424: { $ref: "#/components/responses/424" }
        500: { $ref: "#/components/responses/500" }

  /datasets/community:
    get:
      tags: [ dataset ]
      operationId: getCommunityDatasetList
      summary: List Community Datasets
      # language=markdown
      description: |-
        Returns a list of datasets that have been made "public" by the owner
        setting the dataset visibilities to a setting other than `private`.
      responses:
        200:
          description: List of community datasets.
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "api-schema/types/responses/datasets/list-datasets.json" }
        401: { $ref: "#/components/responses/401" }
        500: { $ref: "#/components/responses/500" }

  /datasets/{dataset-id}:
    parameters:
    - $ref: "#/components/parameters/datasetId"

    get:
      tags: [ dataset ]
      operationId: getDataset
      responses:
        200:
          description: "Dataset details response."
          content:
            application/json:
              schema: { $ref: "api-schema/types/responses/datasets/get-by-id.json" }
        301:
          # language=markdown
          description: |-
            Target dataset has been moved by replacement with a new dataset ID.
          headers:
            Location: { $ref: "#/components/headers/location" }
        401: { $ref: "#/components/responses/401" }
        404: { $ref: "#/components/responses/404" }
        500: { $ref: "#/components/responses/500" }

  /datasets/{dataset-id}/files:
    parameters:
    - $ref: "#/components/parameters/datasetId"

    get:
      tags: [ "dataset", "file" ]
      operationId: getDatasetFileIndex
      responses:
        200:
          description: Dataset file index
          content:
            application/json:
              schema: { $ref: "api-schema/types/responses/datasets/dataset-file-index.json" }
        401: { $ref: "#/components/responses/401" }
        404: { $ref: "#/components/responses/404" }
        500: { $ref: "#/components/responses/500" }

  /datasets/{dataset-id}/files/importReady:
    parameters:
    - $ref: "#/components/parameters/datasetId"
    get:
      tags: [ "dataset", "file" ]
      summary: Get User Upload File
      parameters:
      - name: attachment
        required: false
        in: query
        schema:
          type: boolean
          default: true
      responses:
        200: { $ref: '#/components/responses/File' }
        401: { $ref: "#/components/responses/401" }
        404: { $ref: "#/components/responses/404" }
        500: { $ref: "#/components/responses/500" }

  /datasets/{dataset-id}/files/installReady:
    parameters:
    - $ref: "#/components/parameters/datasetId"
    get:
      tags: [ "dataset", "file" ]
      summary: Get Preprocessed Data
      parameters:
      - name: attachment
        required: false
        in: query
        schema:
          type: boolean
          default: true
      responses:
        200: { $ref: '#/components/responses/File' }
        401: { $ref: "#/components/responses/401" }
        404: { $ref: "#/components/responses/404" }
        500: { $ref: "#/components/responses/500" }

  /datasets/{dataset-id}/files/documents/{file-name}:
    parameters:
    - $ref: "#/components/parameters/datasetId"
    - name: file-name
      required: true
      in: path
      schema:
        type: string
    get:
      tags: [ "dataset", "file" ]
      parameters:
      - name: attachment
        required: false
        in: query
        schema:
          type: boolean
          default: true
      responses:
        200: { $ref: '#/components/responses/File' }
        401: { $ref: "#/components/responses/401" }
        404: { $ref: "#/components/responses/404" }
        500: { $ref: "#/components/responses/500" }

  /datasets/{dataset-id}/shares/:
    parameters:
    - $ref: "#/components/parameters/datasetId"
    get:
      tags: [ "dataset", "share" ]
      summary: Get Share Details
      responses:
        200:
          description: Share Details
          content:
            application/json:
              schema: { $ref: "api-schema/types/responses/datasets/shares/list.json" }
        401: { $ref: "#/components/responses/401" }
        403: { $ref: "#/components/responses/403" }
        404: { $ref: "#/components/responses/404" }
        500: { $ref: "#/components/responses/500" }

  /datasets/{dataset-id}/shares/{recipient-user-id}:
    parameters:
    - $ref: "#/components/parameters/datasetId"
    - $ref: "#/components/parameters/shareRecipientId"
    get:
      tags: [ "dataset", "share" ]
      summary: Get Share Details
      responses:
        200:
          description: Share Details
          content:
            application/json:
              schema: { $ref: "api-schema/types/responses/datasets/shares/details.json" }
        401: { $ref: "#/components/responses/401" }
        403: { $ref: "#/components/responses/403" }
        404: { $ref: "#/components/responses/404" }
        500: { $ref: "#/components/responses/500" }

  /datasets/{dataset-id}/shares/{recipient-user-id}/offer:
    parameters:
    - $ref: "#/components/parameters/datasetId"
    - $ref: "#/components/parameters/shareRecipientId"
    put:
      tags: [ "dataset", "share" ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "api-schema/types/requests/datasets/shares/offer.json" }
      responses:
        204: { description: "Success" }
        400: { $ref: "#/components/responses/400" }
        401: { $ref: "#/components/responses/401" }
        403: { $ref: "#/components/responses/403" }
        404: { $ref: "#/components/responses/404" }
        500: { $ref: "#/components/responses/500" }

  /datasets/{dataset-id}/shares/{recipient-user-id}/receipt:
    parameters:
    - $ref: "#/components/parameters/datasetId"
    - $ref: "#/components/parameters/shareRecipientId"
    put:
      tags: [ "dataset", "share" ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "api-schema/types/requests/datasets/shares/receipt.json" }
      responses:
        204: { description: "Success" }
        400: { $ref: "#/components/responses/400" }
        401: { $ref: "#/components/responses/401" }
        403: { $ref: "#/components/responses/403" }
        404: { $ref: "#/components/responses/404" }
        500: { $ref: "#/components/responses/500" }


  /users/{user-id}:
    parameters:
    - $ref: "#/components/parameters/userId"
    get:
      tags: [ "user" ]
      summary: Get User Details
      responses:
        200:
          description: User Details
          content:
            application/json:
              schema: { $ref: "api-schema/types/responses/users/details.json" }
        401: { $ref: "#/components/responses/401" }
        403: { $ref: "#/components/responses/403" }
        404: { $ref: "#/components/responses/404" }
        500: { $ref: "#/components/responses/500" }

  /users/{user-id}/shares:
    parameters:
    - $ref: "#/components/parameters/userId"
    get:
      summary: Get User Share Info
      tags: [ "user", "share" ]
      responses:
        200:
          description: User Share Listing
          content:
            application/json:
              schema: { $ref: "api-schema/types/responses/users/share-list.json" }
        401: { $ref: "#/components/responses/401" }
        403: { $ref: "#/components/responses/403" }
        404: { $ref: "#/components/responses/404" }
        500: { $ref: "#/components/responses/500" }

components:
  parameters:
    datasetId:
      name: "dataset-id"
      in: path
      required: true
      schema: { $ref: "api-schema/types/common/dataset/dataset-id.json" }
    shareRecipientId:
      name: recipient-user-id
      in: path
      required: true
      schema: { $ref: "api-schema/types/common/wdk/user-id.json" }
    userId:
      name: user-id
      in: path
      required: true
      # language=markdown
      description: |-
        Either the WDK user ID of a target user, or the value `me`.
      schema:
        type: string
        minLength: 2
        # language=regexp
        pattern: ^me|\d{3,12}$
  headers:
    location:
      schema:
        type: string
        format: uri
  responses:
    File:
      description: File contents
      headers:
        # language=markdown
        Content-Disposition:
          required: false
          schema:
            type: string
            examples:
            - attachment; filename="1234567-upload.zip"
      content:
        application/octet-stream:
          schema:
            type: string
            format: file
    400:
      description: Bad Request Error
      content:
        application/json:
          schema: { $ref: "api-schema/types/common/errors/400.json" }
    401:
      description: Unauthorized Error
      content:
        application/json:
          schema: { $ref: "api-schema/types/common/errors/401.json" }
    403:
      description: Forbidden Error
      content:
        application/json:
          schema: { $ref: "api-schema/types/common/errors/403.json" }
    404:
      description: Not Found Error
      content:
        application/json:
          schema: { $ref: "api-schema/types/common/errors/404.json" }
    422:
      description: Unprocessable Entity Error
      content:
        application/json:
          schema: { $ref: "api-schema/types/common/errors/422.json" }
    424:
      description: Failed Dependency Error
      content:
        application/json:
          schema: { $ref: "api-schema/types/common/errors/424.json" }
    500:
      description: Internal Server Error
      content:
        application/json:
          schema: { $ref: "api-schema/types/common/errors/500.json" }
