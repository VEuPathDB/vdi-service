{
  "operations": {
    "classname": "DatasetApi",
    "operation": [
      {
        "responseHeaders": [
          {
            "openApiType": "string",
            "baseName": "Location",
            "complexType": "java.net.URI",
            "getter": "getLocation",
            "setter": "setLocation",
            "dataType": "URI",
            "datatypeWithEnum": "URI",
            "dataFormat": "uri",
            "name": "location",
            "baseType": "java.net.URI",
            "example": "null",
            "isString": true,
            "isUri": true,
            "nameInCamelCase": "location",
            "nameInPascalCase": "Location",
            "nameInSnakeCase": "LOCATION",
            "hasSanitizedName": true,
            "format": "uri"
          }
        ],
        "hasConsumes": true,
        "hasProduces": true,
        "hasParams": true,
        "hasOptionalParams": true,
        "hasRequiredParams": true,
        "returnSimpleType": true,
        "isMultipart": true,
        "isResponseOptional": true,
        "path": "/datasets",
        "operationId": "createDataset",
        "returnType": "CreateDataset201Response",
        "httpMethod": "POST",
        "returnBaseType": "CreateDataset201Response",
        "summary": "Create New Dataset",
        "baseName": "Dataset",
        "defaultResponse": "null",
        "consumes": [
          {
            "mediaType": "multipart/form-data"
          }
        ],
        "produces": [
          {
            "isJson": "true",
            "mediaType": "application/json"
          }
        ],
        "tags": [
          {
            "name": "dataset",
            "description": "Dataset resource API operations."
          }
        ],
        "responses": [
          {
            "headers": [
              {
                "openApiType": "string",
                "baseName": "Location",
                "complexType": "java.net.URI",
                "getter": "getLocation",
                "setter": "setLocation",
                "dataType": "URI",
                "datatypeWithEnum": "URI",
                "dataFormat": "uri",
                "name": "location",
                "baseType": "java.net.URI",
                "example": "null",
                "isString": true,
                "isUri": true,
                "nameInCamelCase": "location",
                "nameInPascalCase": "Location",
                "nameInSnakeCase": "LOCATION",
                "hasSanitizedName": true,
                "format": "uri"
              }
            ],
            "responseHeaders": [
              {
                "isHeaderParam": true,
                "isPrimitiveType": true,
                "baseName": "Location",
                "paramName": "location",
                "dataType": "URI",
                "dataFormat": "uri",
                "style": "simple",
                "nameInLowerCase": "location",
                "nameInCamelCase": "location",
                "nameInPascalCase": "Location",
                "nameInSnakeCase": "LOCATION",
                "example": "location_example",
                "isString": true,
                "schema": {
                  "openApiType": "string",
                  "baseName": "Location",
                  "complexType": "java.net.URI",
                  "getter": "getLocation",
                  "setter": "setLocation",
                  "dataType": "URI",
                  "datatypeWithEnum": "URI",
                  "dataFormat": "uri",
                  "name": "location",
                  "baseType": "java.net.URI",
                  "example": "null",
                  "isString": true,
                  "isUri": true,
                  "nameInCamelCase": "location",
                  "nameInPascalCase": "Location",
                  "nameInSnakeCase": "LOCATION",
                  "hasSanitizedName": true,
                  "format": "uri"
                }
              }
            ],
            "code": "201",
            "is2xx": true,
            "message": "Dataset successfully submitted for processing.",
            "dataType": "CreateDataset201Response",
            "baseType": "CreateDataset201Response",
            "hasHeaders": true,
            "isModel": true,
            "schema": {
              "$ref": "#/components/schemas/createDataset_201_response"
            },
            "content": {
              "application/json": {
                "schema": {
                  "openApiType": "CreateDataset201Response",
                  "baseName": "SchemaFor201ResponseBodyApplicationSlashJson",
                  "complexType": "CreateDataset201Response",
                  "getter": "getSchemaFor201ResponseBodyApplicationSlashJson",
                  "setter": "setSchemaFor201ResponseBodyApplicationSlashJson",
                  "dataType": "CreateDataset201Response",
                  "datatypeWithEnum": "CreateDataset201Response",
                  "name": "schemaFor201ResponseBodyApplicationSlashJson",
                  "baseType": "CreateDataset201Response",
                  "example": "null",
                  "isModel": true,
                  "nameInCamelCase": "schemaFor201ResponseBodyApplicationSlashJson",
                  "nameInPascalCase": "SchemaFor201ResponseBodyApplicationSlashJson",
                  "nameInSnakeCase": "SCHEMA_FOR201_RESPONSE_BODY_APPLICATION_SLASH_JSON",
                  "hasSanitizedName": true,
                  "ref": "#/components/schemas/createDataset_201_response"
                }
              }
            }
          },
          {
            "headers": [
              {
                "openApiType": "string",
                "baseName": "Location",
                "complexType": "java.net.URI",
                "getter": "getLocation",
                "setter": "setLocation",
                "dataType": "URI",
                "datatypeWithEnum": "URI",
                "dataFormat": "uri",
                "name": "location",
                "baseType": "java.net.URI",
                "example": "null",
                "isString": true,
                "isUri": true,
                "nameInCamelCase": "location",
                "nameInPascalCase": "Location",
                "nameInSnakeCase": "LOCATION",
                "hasSanitizedName": true,
                "format": "uri"
              }
            ],
            "responseHeaders": [
              {
                "isHeaderParam": true,
                "isPrimitiveType": true,
                "baseName": "Location",
                "paramName": "location",
                "dataType": "URI",
                "dataFormat": "uri",
                "style": "simple",
                "nameInLowerCase": "location",
                "nameInCamelCase": "location",
                "nameInPascalCase": "Location",
                "nameInSnakeCase": "LOCATION",
                "example": "location_example",
                "isString": true,
                "schema": {
                  "openApiType": "string",
                  "baseName": "Location",
                  "complexType": "java.net.URI",
                  "getter": "getLocation",
                  "setter": "setLocation",
                  "dataType": "URI",
                  "datatypeWithEnum": "URI",
                  "dataFormat": "uri",
                  "name": "location",
                  "baseType": "java.net.URI",
                  "example": "null",
                  "isString": true,
                  "isUri": true,
                  "nameInCamelCase": "location",
                  "nameInPascalCase": "Location",
                  "nameInSnakeCase": "LOCATION",
                  "hasSanitizedName": true,
                  "format": "uri"
                }
              }
            ],
            "code": "204",
            "is2xx": true,
            "message": "Nothing",
            "hasHeaders": true,
            "simpleType": true,
            "primitiveType": true
          }
        ],
        "imports": [
          "CreateDataset201Response",
          "DatasetPostMeta",
          "java.net.URI"
        ],
        "nickname": "createDataset",
        "operationIdOriginal": "createDataset",
        "operationIdLowerCase": "createdataset",
        "operationIdCamelCase": "CreateDataset",
        "operationIdSnakeCase": "create_dataset",
        "parameters": [
          {
            "isFormParam": true,
            "isModel": true,
            "baseName": "details",
            "paramName": "details",
            "dataType": "DatasetPostMeta",
            "baseType": "DatasetPostMeta",
            "nameInLowerCase": "details",
            "nameInCamelCase": "details",
            "nameInPascalCase": "Details",
            "nameInSnakeCase": "DETAILS",
            "required": true
          },
          {
            "isFormParam": true,
            "isContainer": true,
            "baseName": "metaFiles",
            "paramName": "metaFiles",
            "dataType": "List<File>",
            "datatypeWithEnum": "List<File>",
            "collectionFormat": "csv",
            "baseType": "java.io.File",
            "nameInLowerCase": "metafiles",
            "nameInCamelCase": "metaFiles",
            "nameInPascalCase": "MetaFiles",
            "nameInSnakeCase": "META_FILES",
            "isArray": true,
            "items": {
              "openApiType": "file",
              "baseName": "inner",
              "complexType": "java.io.File",
              "getter": "get`Inner`",
              "setter": "set`Inner`",
              "dataType": "File",
              "datatypeWithEnum": "File",
              "name": "`inner`",
              "baseType": "java.io.File",
              "title": "Upload File",
              "example": "null",
              "nameInCamelCase": "`inner`",
              "nameInPascalCase": "`Inner`",
              "nameInSnakeCase": "`_INNER`",
              "hasSanitizedName": true
            },
            "containerType": "array",
            "containerTypeMapped": "List"
          },
          {
            "isFormParam": true,
            "isContainer": true,
            "baseName": "dataFiles",
            "paramName": "dataFiles",
            "dataType": "List<File>",
            "datatypeWithEnum": "List<File>",
            "collectionFormat": "csv",
            "baseType": "java.io.File",
            "nameInLowerCase": "datafiles",
            "nameInCamelCase": "dataFiles",
            "nameInPascalCase": "DataFiles",
            "nameInSnakeCase": "DATA_FILES",
            "isArray": true,
            "items": {
              "openApiType": "file",
              "baseName": "inner",
              "complexType": "java.io.File",
              "getter": "get`Inner`",
              "setter": "set`Inner`",
              "dataType": "File",
              "datatypeWithEnum": "File",
              "name": "`inner`",
              "baseType": "java.io.File",
              "title": "Upload File",
              "example": "null",
              "nameInCamelCase": "`inner`",
              "nameInPascalCase": "`Inner`",
              "nameInSnakeCase": "`_INNER`",
              "hasSanitizedName": true
            },
            "hasValidation": true,
            "containerType": "array",
            "containerTypeMapped": "List",
            "minItems": 1
          },
          {
            "isFormParam": true,
            "isContainer": true,
            "baseName": "urls",
            "paramName": "urls",
            "dataType": "List<URI>",
            "datatypeWithEnum": "List<URI>",
            "dataFormat": "iri",
            "collectionFormat": "csv",
            "baseType": "java.net.URI",
            "nameInLowerCase": "urls",
            "nameInCamelCase": "urls",
            "nameInPascalCase": "Urls",
            "nameInSnakeCase": "URLS",
            "isArray": true,
            "items": {
              "openApiType": "string",
              "baseName": "inner",
              "getter": "get`Inner`",
              "setter": "set`Inner`",
              "dataType": "URI",
              "datatypeWithEnum": "URI",
              "dataFormat": "iri",
              "name": "`inner`",
              "baseType": "java.net.URI",
              "example": "null",
              "isPrimitiveType": true,
              "isString": true,
              "nameInCamelCase": "`inner`",
              "nameInPascalCase": "`Inner`",
              "nameInSnakeCase": "`_INNER`",
              "hasSanitizedName": true,
              "format": "iri"
            },
            "hasValidation": true,
            "containerType": "array",
            "containerTypeMapped": "List",
            "minItems": 1
          }
        ]
      },
      {
        "hasProduces": true,
        "hasParams": true,
        "hasRequiredParams": true,
        "returnSimpleType": true,
        "hasErrorResponseObject": true,
        "hasSingleParam": true,
        "path": "/datasets/{dataset-id}",
        "operationId": "getDataset",
        "returnType": "DatasetGetResponse",
        "httpMethod": "GET",
        "returnBaseType": "DatasetGetResponse",
        "baseName": "Dataset",
        "defaultResponse": "null",
        "produces": [
          {
            "isJson": "true",
            "mediaType": "application/json"
          }
        ],
        "tags": [
          {
            "name": "dataset",
            "description": "Dataset resource API operations."
          }
        ],
        "responses": [
          {
            "code": "200",
            "is2xx": true,
            "message": "Dataset details response.",
            "dataType": "DatasetGetResponse",
            "baseType": "DatasetGetResponse",
            "isModel": true,
            "schema": {
              "$ref": "#/components/schemas/Dataset_Get_Response"
            },
            "content": {
              "application/json": {
                "schema": {
                  "openApiType": "DatasetGetResponse",
                  "baseName": "SchemaFor200ResponseBodyApplicationSlashJson",
                  "complexType": "DatasetGetResponse",
                  "getter": "getSchemaFor200ResponseBodyApplicationSlashJson",
                  "setter": "setSchemaFor200ResponseBodyApplicationSlashJson",
                  "dataType": "DatasetGetResponse",
                  "datatypeWithEnum": "DatasetGetResponse",
                  "name": "schemaFor200ResponseBodyApplicationSlashJson",
                  "baseType": "DatasetGetResponse",
                  "example": "null",
                  "isModel": true,
                  "nameInCamelCase": "schemaFor200ResponseBodyApplicationSlashJson",
                  "nameInPascalCase": "SchemaFor200ResponseBodyApplicationSlashJson",
                  "nameInSnakeCase": "SCHEMA_FOR200_RESPONSE_BODY_APPLICATION_SLASH_JSON",
                  "hasSanitizedName": true,
                  "ref": "#/components/schemas/Dataset_Get_Response"
                }
              }
            }
          },
          {
            "headers": [
              {
                "openApiType": "string",
                "baseName": "Location",
                "complexType": "java.net.URI",
                "getter": "getLocation",
                "setter": "setLocation",
                "dataType": "URI",
                "datatypeWithEnum": "URI",
                "dataFormat": "uri",
                "name": "location",
                "baseType": "java.net.URI",
                "example": "null",
                "isString": true,
                "isUri": true,
                "nameInCamelCase": "location",
                "nameInPascalCase": "Location",
                "nameInSnakeCase": "LOCATION",
                "hasSanitizedName": true,
                "format": "uri"
              }
            ],
            "responseHeaders": [
              {
                "isHeaderParam": true,
                "isPrimitiveType": true,
                "baseName": "Location",
                "paramName": "location",
                "dataType": "URI",
                "dataFormat": "uri",
                "style": "simple",
                "nameInLowerCase": "location",
                "nameInCamelCase": "location",
                "nameInPascalCase": "Location",
                "nameInSnakeCase": "LOCATION",
                "example": "location_example",
                "isString": true,
                "schema": {
                  "openApiType": "string",
                  "baseName": "Location",
                  "complexType": "java.net.URI",
                  "getter": "getLocation",
                  "setter": "setLocation",
                  "dataType": "URI",
                  "datatypeWithEnum": "URI",
                  "dataFormat": "uri",
                  "name": "location",
                  "baseType": "java.net.URI",
                  "example": "null",
                  "isString": true,
                  "isUri": true,
                  "nameInCamelCase": "location",
                  "nameInPascalCase": "Location",
                  "nameInSnakeCase": "LOCATION",
                  "hasSanitizedName": true,
                  "format": "uri"
                }
              }
            ],
            "code": "301",
            "is3xx": true,
            "message": "Target dataset has been moved by replacement with a new dataset ID.",
            "hasHeaders": true,
            "simpleType": true,
            "primitiveType": true
          },
          {
            "code": "401",
            "is4xx": true,
            "message": "Unauthorized Error",
            "dataType": "UnauthorizedRequestError",
            "baseType": "UnauthorizedRequestError",
            "isModel": true,
            "schema": {
              "$ref": "#/components/schemas/Unauthorized_Request_Error"
            },
            "content": {
              "application/json": {
                "schema": {
                  "openApiType": "UnauthorizedRequestError",
                  "baseName": "SchemaFor401ResponseBodyApplicationSlashJson",
                  "complexType": "UnauthorizedRequestError",
                  "getter": "getSchemaFor401ResponseBodyApplicationSlashJson",
                  "setter": "setSchemaFor401ResponseBodyApplicationSlashJson",
                  "dataType": "UnauthorizedRequestError",
                  "datatypeWithEnum": "UnauthorizedRequestError",
                  "name": "schemaFor401ResponseBodyApplicationSlashJson",
                  "baseType": "UnauthorizedRequestError",
                  "example": "null",
                  "isModel": true,
                  "vendorExtensions": {
                    "x-discriminator-value": "unauthorized"
                  },
                  "nameInCamelCase": "schemaFor401ResponseBodyApplicationSlashJson",
                  "nameInPascalCase": "SchemaFor401ResponseBodyApplicationSlashJson",
                  "nameInSnakeCase": "SCHEMA_FOR401_RESPONSE_BODY_APPLICATION_SLASH_JSON",
                  "hasSanitizedName": true,
                  "ref": "#/components/schemas/Unauthorized_Request_Error"
                }
              }
            }
          },
          {
            "code": "404",
            "is4xx": true,
            "message": "Not Found Error",
            "dataType": "NotFoundError",
            "baseType": "NotFoundError",
            "isModel": true,
            "schema": {
              "$ref": "#/components/schemas/Not_Found_Error"
            },
            "content": {
              "application/json": {
                "schema": {
                  "openApiType": "NotFoundError",
                  "baseName": "SchemaFor404ResponseBodyApplicationSlashJson",
                  "complexType": "NotFoundError",
                  "getter": "getSchemaFor404ResponseBodyApplicationSlashJson",
                  "setter": "setSchemaFor404ResponseBodyApplicationSlashJson",
                  "dataType": "NotFoundError",
                  "datatypeWithEnum": "NotFoundError",
                  "name": "schemaFor404ResponseBodyApplicationSlashJson",
                  "baseType": "NotFoundError",
                  "example": "null",
                  "isModel": true,
                  "vendorExtensions": {
                    "x-discriminator-value": "not-found"
                  },
                  "nameInCamelCase": "schemaFor404ResponseBodyApplicationSlashJson",
                  "nameInPascalCase": "SchemaFor404ResponseBodyApplicationSlashJson",
                  "nameInSnakeCase": "SCHEMA_FOR404_RESPONSE_BODY_APPLICATION_SLASH_JSON",
                  "hasSanitizedName": true,
                  "ref": "#/components/schemas/Not_Found_Error"
                }
              }
            }
          },
          {
            "code": "500",
            "is5xx": true,
            "message": "Internal Server Error",
            "dataType": "InternalServerError",
            "baseType": "InternalServerError",
            "isModel": true,
            "schema": {
              "$ref": "#/components/schemas/Internal_Server_Error"
            },
            "content": {
              "application/json": {
                "schema": {
                  "openApiType": "InternalServerError",
                  "baseName": "SchemaFor500ResponseBodyApplicationSlashJson",
                  "complexType": "InternalServerError",
                  "getter": "getSchemaFor500ResponseBodyApplicationSlashJson",
                  "setter": "setSchemaFor500ResponseBodyApplicationSlashJson",
                  "dataType": "InternalServerError",
                  "datatypeWithEnum": "InternalServerError",
                  "name": "schemaFor500ResponseBodyApplicationSlashJson",
                  "baseType": "InternalServerError",
                  "example": "null",
                  "isModel": true,
                  "vendorExtensions": {
                    "x-discriminator-value": "server-error"
                  },
                  "nameInCamelCase": "schemaFor500ResponseBodyApplicationSlashJson",
                  "nameInPascalCase": "SchemaFor500ResponseBodyApplicationSlashJson",
                  "nameInSnakeCase": "SCHEMA_FOR500_RESPONSE_BODY_APPLICATION_SLASH_JSON",
                  "hasSanitizedName": true,
                  "ref": "#/components/schemas/Internal_Server_Error"
                }
              }
            }
          }
        ],
        "imports": [
          "UnauthorizedRequestError",
          "DatasetGetResponse",
          "NotFoundError",
          "InternalServerError"
        ],
        "nickname": "getDataset",
        "operationIdOriginal": "getDataset",
        "operationIdLowerCase": "getdataset",
        "operationIdCamelCase": "GetDataset",
        "operationIdSnakeCase": "get_dataset",
        "parameters": [
          {
            "isPathParam": true,
            "isPrimitiveType": true,
            "baseName": "dataset-id",
            "paramName": "datasetId",
            "dataType": "String",
            "style": "simple",
            "nameInLowerCase": "datasetid",
            "nameInCamelCase": "datasetId",
            "nameInPascalCase": "DatasetId",
            "nameInSnakeCase": "DATASET_ID",
            "example": "datasetId_example",
            "isString": true,
            "hasValidation": true,
            "schema": {
              "openApiType": "string",
              "baseName": "dataset-id",
              "getter": "getDatasetId",
              "setter": "setDatasetId",
              "description": "Randomly generated identifier for a dataset, optionally suffixed with a revision counter.",
              "dataType": "String",
              "datatypeWithEnum": "String",
              "name": "datasetId",
              "baseType": "String",
              "title": "Dataset ID",
              "unescapedDescription": "Randomly generated identifier for a dataset, optionally suffixed with a revision counter.",
              "maxLength": 16,
              "minLength": 11,
              "pattern": "^\\\\w{11,16}(?:\\\\.\\\\d+)?$",
              "example": "null",
              "isPrimitiveType": true,
              "isString": true,
              "hasValidation": true,
              "nameInCamelCase": "datasetId",
              "nameInPascalCase": "DatasetId",
              "nameInSnakeCase": "DATASET_ID",
              "hasSanitizedName": true
            },
            "required": true,
            "maxLength": 16,
            "minLength": 11,
            "pattern": "^\\\\w{11,16}(?:\\\\.\\\\d+)?$"
          }
        ]
      },
      {
        "hasProduces": true,
        "hasParams": true,
        "hasOptionalParams": true,
        "isArray": true,
        "hasErrorResponseObject": true,
        "path": "/datasets",
        "operationId": "getDatasetList",
        "returnType": "List<DatasetListItem>",
        "httpMethod": "GET",
        "returnBaseType": "DatasetListItem",
        "returnContainer": "array",
        "summary": "List Datasets",
        "baseName": "Dataset",
        "defaultResponse": "null",
        "produces": [
          {
            "isJson": "true",
            "mediaType": "application/json"
          }
        ],
        "tags": [
          {
            "name": "dataset",
            "description": "Dataset resource API operations."
          }
        ],
        "responses": [
          {
            "code": "200",
            "is2xx": true,
            "message": "List of objects containing basic dataset details.",
            "dataType": "List<DatasetListItem>",
            "baseType": "DatasetListItem",
            "containerType": "array",
            "containerTypeMapped": "List",
            "isArray": true,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/Dataset_List_Item"
              }
            },
            "items": {
              "openApiType": "DatasetListItem",
              "baseName": "response",
              "complexType": "DatasetListItem",
              "getter": "getResponse",
              "setter": "setResponse",
              "dataType": "DatasetListItem",
              "datatypeWithEnum": "DatasetListItem",
              "name": "response",
              "baseType": "DatasetListItem",
              "example": "null",
              "isModel": true,
              "vendorExtensions": {
                "$defs": {
                  "datasetListShareUser": {
                    "title": "Dataset List Share Info",
                    "type": "object",
                    "properties": {
                      "userId": {
                        "$ref": "../../common/wdk/user-id.json"
                      },
                      "firstName": {
                        "type": "string"
                      },
                      "lastName": {
                        "type": "string"
                      },
                      "organization": {
                        "type": "string"
                      },
                      "accepted": {
                        "type": "boolean"
                      }
                    },
                    "unevaluatedProperties": false,
                    "required": [
                      "userId",
                      "firstName",
                      "lastName",
                      "organization",
                      "accepted"
                    ]
                  }
                }
              },
              "nameInCamelCase": "response",
              "nameInPascalCase": "Response",
              "nameInSnakeCase": "RESPONSE",
              "ref": "#/components/schemas/Dataset_List_Item"
            },
            "content": {
              "application/json": {
                "schema": {
                  "openApiType": "array",
                  "baseName": "SchemaFor200ResponseBodyApplicationSlashJson",
                  "complexType": "DatasetListItem",
                  "getter": "getSchemaFor200ResponseBodyApplicationSlashJson",
                  "setter": "setSchemaFor200ResponseBodyApplicationSlashJson",
                  "dataType": "List<DatasetListItem>",
                  "datatypeWithEnum": "List<DatasetListItem>",
                  "name": "schemaFor200ResponseBodyApplicationSlashJson",
                  "baseType": "List",
                  "containerType": "array",
                  "containerTypeMapped": "List",
                  "example": "null",
                  "isContainer": true,
                  "isArray": true,
                  "items": {
                    "openApiType": "DatasetListItem",
                    "baseName": "schemaFor200ResponseBodyApplicationSlashJson",
                    "complexType": "DatasetListItem",
                    "getter": "getSchemaFor200ResponseBodyApplicationSlashJson",
                    "setter": "setSchemaFor200ResponseBodyApplicationSlashJson",
                    "dataType": "DatasetListItem",
                    "datatypeWithEnum": "DatasetListItem",
                    "name": "schemaFor200ResponseBodyApplicationSlashJson",
                    "baseType": "DatasetListItem",
                    "example": "null",
                    "isModel": true,
                    "vendorExtensions": {
                      "$defs": {
                        "datasetListShareUser": {
                          "title": "Dataset List Share Info",
                          "type": "object",
                          "properties": {
                            "userId": {
                              "$ref": "../../common/wdk/user-id.json"
                            },
                            "firstName": {
                              "type": "string"
                            },
                            "lastName": {
                              "type": "string"
                            },
                            "organization": {
                              "type": "string"
                            },
                            "accepted": {
                              "type": "boolean"
                            }
                          },
                          "unevaluatedProperties": false,
                          "required": [
                            "userId",
                            "firstName",
                            "lastName",
                            "organization",
                            "accepted"
                          ]
                        }
                      }
                    },
                    "nameInCamelCase": "schemaFor200ResponseBodyApplicationSlashJson",
                    "nameInPascalCase": "SchemaFor200ResponseBodyApplicationSlashJson",
                    "nameInSnakeCase": "SCHEMA_FOR200_RESPONSE_BODY_APPLICATION_SLASH_JSON",
                    "ref": "#/components/schemas/Dataset_List_Item"
                  },
                  "mostInnerItems": {
                    "openApiType": "DatasetListItem",
                    "baseName": "schemaFor200ResponseBodyApplicationSlashJson",
                    "complexType": "DatasetListItem",
                    "getter": "getSchemaFor200ResponseBodyApplicationSlashJson",
                    "setter": "setSchemaFor200ResponseBodyApplicationSlashJson",
                    "dataType": "DatasetListItem",
                    "datatypeWithEnum": "DatasetListItem",
                    "name": "schemaFor200ResponseBodyApplicationSlashJson",
                    "baseType": "DatasetListItem",
                    "example": "null",
                    "isModel": true,
                    "vendorExtensions": {
                      "$defs": {
                        "datasetListShareUser": {
                          "title": "Dataset List Share Info",
                          "type": "object",
                          "properties": {
                            "userId": {
                              "$ref": "../../common/wdk/user-id.json"
                            },
                            "firstName": {
                              "type": "string"
                            },
                            "lastName": {
                              "type": "string"
                            },
                            "organization": {
                              "type": "string"
                            },
                            "accepted": {
                              "type": "boolean"
                            }
                          },
                          "unevaluatedProperties": false,
                          "required": [
                            "userId",
                            "firstName",
                            "lastName",
                            "organization",
                            "accepted"
                          ]
                        }
                      }
                    },
                    "nameInCamelCase": "schemaFor200ResponseBodyApplicationSlashJson",
                    "nameInPascalCase": "SchemaFor200ResponseBodyApplicationSlashJson",
                    "nameInSnakeCase": "SCHEMA_FOR200_RESPONSE_BODY_APPLICATION_SLASH_JSON",
                    "ref": "#/components/schemas/Dataset_List_Item"
                  },
                  "nameInCamelCase": "schemaFor200ResponseBodyApplicationSlashJson",
                  "nameInPascalCase": "SchemaFor200ResponseBodyApplicationSlashJson",
                  "nameInSnakeCase": "SCHEMA_FOR200_RESPONSE_BODY_APPLICATION_SLASH_JSON",
                  "hasSanitizedName": true
                }
              }
            }
          },
          {
            "code": "400",
            "is4xx": true,
            "message": "Bad Request Error",
            "dataType": "BadRequestError",
            "baseType": "BadRequestError",
            "isModel": true,
            "schema": {
              "$ref": "#/components/schemas/Bad_Request_Error"
            },
            "content": {
              "application/json": {
                "schema": {
                  "openApiType": "BadRequestError",
                  "baseName": "SchemaFor400ResponseBodyApplicationSlashJson",
                  "complexType": "BadRequestError",
                  "getter": "getSchemaFor400ResponseBodyApplicationSlashJson",
                  "setter": "setSchemaFor400ResponseBodyApplicationSlashJson",
                  "dataType": "BadRequestError",
                  "datatypeWithEnum": "BadRequestError",
                  "name": "schemaFor400ResponseBodyApplicationSlashJson",
                  "baseType": "BadRequestError",
                  "example": "null",
                  "isModel": true,
                  "vendorExtensions": {
                    "x-discriminator-value": "bad-request"
                  },
                  "nameInCamelCase": "schemaFor400ResponseBodyApplicationSlashJson",
                  "nameInPascalCase": "SchemaFor400ResponseBodyApplicationSlashJson",
                  "nameInSnakeCase": "SCHEMA_FOR400_RESPONSE_BODY_APPLICATION_SLASH_JSON",
                  "hasSanitizedName": true,
                  "ref": "#/components/schemas/Bad_Request_Error"
                }
              }
            }
          },
          {
            "code": "401",
            "is4xx": true,
            "message": "Unauthorized Error",
            "dataType": "UnauthorizedRequestError",
            "baseType": "UnauthorizedRequestError",
            "isModel": true,
            "schema": {
              "$ref": "#/components/schemas/Unauthorized_Request_Error"
            },
            "content": {
              "application/json": {
                "schema": {
                  "openApiType": "UnauthorizedRequestError",
                  "baseName": "SchemaFor401ResponseBodyApplicationSlashJson",
                  "complexType": "UnauthorizedRequestError",
                  "getter": "getSchemaFor401ResponseBodyApplicationSlashJson",
                  "setter": "setSchemaFor401ResponseBodyApplicationSlashJson",
                  "dataType": "UnauthorizedRequestError",
                  "datatypeWithEnum": "UnauthorizedRequestError",
                  "name": "schemaFor401ResponseBodyApplicationSlashJson",
                  "baseType": "UnauthorizedRequestError",
                  "example": "null",
                  "isModel": true,
                  "vendorExtensions": {
                    "x-discriminator-value": "unauthorized"
                  },
                  "nameInCamelCase": "schemaFor401ResponseBodyApplicationSlashJson",
                  "nameInPascalCase": "SchemaFor401ResponseBodyApplicationSlashJson",
                  "nameInSnakeCase": "SCHEMA_FOR401_RESPONSE_BODY_APPLICATION_SLASH_JSON",
                  "hasSanitizedName": true,
                  "ref": "#/components/schemas/Unauthorized_Request_Error"
                }
              }
            }
          },
          {
            "code": "500",
            "is5xx": true,
            "message": "Internal Server Error",
            "dataType": "InternalServerError",
            "baseType": "InternalServerError",
            "isModel": true,
            "schema": {
              "$ref": "#/components/schemas/Internal_Server_Error"
            },
            "content": {
              "application/json": {
                "schema": {
                  "openApiType": "InternalServerError",
                  "baseName": "SchemaFor500ResponseBodyApplicationSlashJson",
                  "complexType": "InternalServerError",
                  "getter": "getSchemaFor500ResponseBodyApplicationSlashJson",
                  "setter": "setSchemaFor500ResponseBodyApplicationSlashJson",
                  "dataType": "InternalServerError",
                  "datatypeWithEnum": "InternalServerError",
                  "name": "schemaFor500ResponseBodyApplicationSlashJson",
                  "baseType": "InternalServerError",
                  "example": "null",
                  "isModel": true,
                  "vendorExtensions": {
                    "x-discriminator-value": "server-error"
                  },
                  "nameInCamelCase": "schemaFor500ResponseBodyApplicationSlashJson",
                  "nameInPascalCase": "SchemaFor500ResponseBodyApplicationSlashJson",
                  "nameInSnakeCase": "SCHEMA_FOR500_RESPONSE_BODY_APPLICATION_SLASH_JSON",
                  "hasSanitizedName": true,
                  "ref": "#/components/schemas/Internal_Server_Error"
                }
              }
            }
          }
        ],
        "imports": [
          "GetDatasetListOwnershipParameter",
          "UnauthorizedRequestError",
          "InstallTargetID",
          "DatasetListItem",
          "BadRequestError",
          "InternalServerError"
        ],
        "nickname": "getDatasetList",
        "operationIdOriginal": "getDatasetList",
        "operationIdLowerCase": "getdatasetlist",
        "operationIdCamelCase": "GetDatasetList",
        "operationIdSnakeCase": "get_dataset_list",
        "parameters": [
          {
            "isQueryParam": true,
            "isExplode": true,
            "baseName": "project_id",
            "paramName": "projectId",
            "dataType": "InstallTargetID",
            "description": "Project ID filter.  ID of the VEuPathDB project that results should be filtered to.  This means only datasets that are relevant to the project ID given will be returned.  Additionally, this controls the sites on which the dataset installation status will be checked. Meaning, if this parameter is specified and set to, for example, `PlasmoDB`, the status block in the response objects will only include installation status details for `PlasmoDB` and not any other sites that the dataset may have been installed into.  This is desirable for UI-based client use to improve request processing time by the service.",
            "unescapedDescription": "Project ID filter.\n\nID of the VEuPathDB project that results should be filtered to.\n\nThis means only datasets that are relevant to the project ID given\nwill be returned.\n\nAdditionally, this controls the sites on which the dataset\ninstallation status will be checked. Meaning, if this parameter is\nspecified and set to, for example, `PlasmoDB`, the status block in the\nresponse objects will only include installation status details for\n`PlasmoDB` and not any other sites that the dataset may have been\ninstalled into.\n\nThis is desirable for UI-based client use to improve request\nprocessing time by the service.",
            "style": "form",
            "nameInLowerCase": "projectid",
            "nameInCamelCase": "projectId",
            "nameInPascalCase": "ProjectId",
            "nameInSnakeCase": "PROJECT_ID",
            "isEnumRef": true,
            "allowableValues": {
              "values": [
                "AmoebaDB",
                "ClinEpiDB",
                "CryptoDB",
                "FungiDB",
                "GiardiaDB",
                "HostDB",
                "MicrobiomeDB",
                "MicrosporidiaDB",
                "OrthoMCL",
                "PiroplasmaDB",
                "PlasmoDB",
                "ToxoDB",
                "TrichDB",
                "TriTrypDB",
                "VectorBase",
                "VEuPathDB"
              ],
              "enumVars": [
                {
                  "name": "AmoebaDB",
                  "isString": true,
                  "value": "\"AmoebaDB\""
                },
                {
                  "name": "ClinEpiDB",
                  "isString": true,
                  "value": "\"ClinEpiDB\""
                },
                {
                  "name": "CryptoDB",
                  "isString": true,
                  "value": "\"CryptoDB\""
                },
                {
                  "name": "FungiDB",
                  "isString": true,
                  "value": "\"FungiDB\""
                },
                {
                  "name": "GiardiaDB",
                  "isString": true,
                  "value": "\"GiardiaDB\""
                },
                {
                  "name": "HostDB",
                  "isString": true,
                  "value": "\"HostDB\""
                },
                {
                  "name": "MicrobiomeDB",
                  "isString": true,
                  "value": "\"MicrobiomeDB\""
                },
                {
                  "name": "MicrosporidiaDB",
                  "isString": true,
                  "value": "\"MicrosporidiaDB\""
                },
                {
                  "name": "OrthoMCL",
                  "isString": true,
                  "value": "\"OrthoMCL\""
                },
                {
                  "name": "PiroplasmaDB",
                  "isString": true,
                  "value": "\"PiroplasmaDB\""
                },
                {
                  "name": "PlasmoDB",
                  "isString": true,
                  "value": "\"PlasmoDB\""
                },
                {
                  "name": "ToxoDB",
                  "isString": true,
                  "value": "\"ToxoDB\""
                },
                {
                  "name": "TrichDB",
                  "isString": true,
                  "value": "\"TrichDB\""
                },
                {
                  "name": "TriTrypDB",
                  "isString": true,
                  "value": "\"TriTrypDB\""
                },
                {
                  "name": "VectorBase",
                  "isString": true,
                  "value": "\"VectorBase\""
                },
                {
                  "name": "VEuPathDB",
                  "isString": true,
                  "value": "\"VEuPathDB\""
                }
              ]
            },
            "schema": {
              "openApiType": "InstallTargetID",
              "baseName": "project_id",
              "complexType": "InstallTargetID",
              "getter": "getProjectId",
              "setter": "setProjectId",
              "dataType": "InstallTargetID",
              "datatypeWithEnum": "InstallTargetID",
              "name": "projectId",
              "baseType": "InstallTargetID",
              "example": "null",
              "isEnumRef": true,
              "allowableValues": {
                "values": [
                  "AmoebaDB",
                  "ClinEpiDB",
                  "CryptoDB",
                  "FungiDB",
                  "GiardiaDB",
                  "HostDB",
                  "MicrobiomeDB",
                  "MicrosporidiaDB",
                  "OrthoMCL",
                  "PiroplasmaDB",
                  "PlasmoDB",
                  "ToxoDB",
                  "TrichDB",
                  "TriTrypDB",
                  "VectorBase",
                  "VEuPathDB"
                ],
                "enumVars": [
                  {
                    "name": "AmoebaDB",
                    "isString": true,
                    "value": "\"AmoebaDB\""
                  },
                  {
                    "name": "ClinEpiDB",
                    "isString": true,
                    "value": "\"ClinEpiDB\""
                  },
                  {
                    "name": "CryptoDB",
                    "isString": true,
                    "value": "\"CryptoDB\""
                  },
                  {
                    "name": "FungiDB",
                    "isString": true,
                    "value": "\"FungiDB\""
                  },
                  {
                    "name": "GiardiaDB",
                    "isString": true,
                    "value": "\"GiardiaDB\""
                  },
                  {
                    "name": "HostDB",
                    "isString": true,
                    "value": "\"HostDB\""
                  },
                  {
                    "name": "MicrobiomeDB",
                    "isString": true,
                    "value": "\"MicrobiomeDB\""
                  },
                  {
                    "name": "MicrosporidiaDB",
                    "isString": true,
                    "value": "\"MicrosporidiaDB\""
                  },
                  {
                    "name": "OrthoMCL",
                    "isString": true,
                    "value": "\"OrthoMCL\""
                  },
                  {
                    "name": "PiroplasmaDB",
                    "isString": true,
                    "value": "\"PiroplasmaDB\""
                  },
                  {
                    "name": "PlasmoDB",
                    "isString": true,
                    "value": "\"PlasmoDB\""
                  },
                  {
                    "name": "ToxoDB",
                    "isString": true,
                    "value": "\"ToxoDB\""
                  },
                  {
                    "name": "TrichDB",
                    "isString": true,
                    "value": "\"TrichDB\""
                  },
                  {
                    "name": "TriTrypDB",
                    "isString": true,
                    "value": "\"TriTrypDB\""
                  },
                  {
                    "name": "VectorBase",
                    "isString": true,
                    "value": "\"VectorBase\""
                  },
                  {
                    "name": "VEuPathDB",
                    "isString": true,
                    "value": "\"VEuPathDB\""
                  }
                ]
              },
              "nameInCamelCase": "projectId",
              "nameInPascalCase": "ProjectId",
              "nameInSnakeCase": "PROJECT_ID",
              "hasSanitizedName": true,
              "ref": "#/components/schemas/Install_Target"
            }
          },
          {
            "isQueryParam": true,
            "isExplode": true,
            "baseName": "ownership",
            "paramName": "ownership",
            "dataType": "GetDatasetListOwnershipParameter",
            "description": "Ownership status filter.  Enum of:  * `any` * `owned` * `shared`  If set to `any` the results are not filtered.  If set to `owned`, the results will be filtered to only results that are owned by the requesting user.  If set to `shared`, the results will be filtered to only results that are shared with the requesting user.",
            "unescapedDescription": "Ownership status filter.\n\nEnum of:\n\n* `any`\n* `owned`\n* `shared`\n\nIf set to `any` the results are not filtered.\n\nIf set to `owned`, the results will be filtered to only results that\nare owned by the requesting user.\n\nIf set to `shared`, the results will be filtered to only results that\nare shared with the requesting user.",
            "defaultValue": "any",
            "style": "form",
            "nameInLowerCase": "ownership",
            "nameInCamelCase": "ownership",
            "nameInPascalCase": "Ownership",
            "nameInSnakeCase": "OWNERSHIP",
            "isEnumRef": true,
            "allowableValues": {
              "values": [
                "any",
                "owned",
                "shared"
              ],
              "enumVars": [
                {
                  "name": "Any",
                  "isString": true,
                  "value": "\"any\""
                },
                {
                  "name": "Owned",
                  "isString": true,
                  "value": "\"owned\""
                },
                {
                  "name": "Shared",
                  "isString": true,
                  "value": "\"shared\""
                }
              ]
            },
            "schema": {
              "openApiType": "GetDatasetListOwnershipParameter",
              "baseName": "ownership",
              "complexType": "GetDatasetListOwnershipParameter",
              "getter": "getOwnership",
              "setter": "setOwnership",
              "dataType": "GetDatasetListOwnershipParameter",
              "datatypeWithEnum": "GetDatasetListOwnershipParameter",
              "name": "ownership",
              "defaultValue": "GetDatasetListOwnershipParameter.Any",
              "baseType": "GetDatasetListOwnershipParameter",
              "example": "null",
              "isEnumRef": true,
              "allowableValues": {
                "values": [
                  "any",
                  "owned",
                  "shared"
                ],
                "enumVars": [
                  {
                    "name": "Any",
                    "isString": true,
                    "value": "\"any\""
                  },
                  {
                    "name": "Owned",
                    "isString": true,
                    "value": "\"owned\""
                  },
                  {
                    "name": "Shared",
                    "isString": true,
                    "value": "\"shared\""
                  }
                ]
              },
              "nameInCamelCase": "ownership",
              "nameInPascalCase": "Ownership",
              "nameInSnakeCase": "OWNERSHIP",
              "ref": "#/components/schemas/getDatasetList_ownership_parameter"
            }
          }
        ]
      }
    ],
    "pathPrefix": "dataset"
  },
  "package": "vdi.service.rest.generated.api",
  "imports": [
    {
      "import": "vdi.service.rest.generated.model.BadRequestError"
    },
    {
      "import": "vdi.service.rest.generated.model.CreateDataset201Response"
    },
    {
      "import": "vdi.service.rest.generated.model.DatasetGetResponse"
    },
    {
      "import": "vdi.service.rest.generated.model.DatasetListItem"
    },
    {
      "import": "vdi.service.rest.generated.model.DatasetPostMeta"
    },
    {
      "import": "vdi.service.rest.generated.model.GetDatasetListOwnershipParameter"
    },
    {
      "import": "vdi.service.rest.generated.model.InstallTargetID"
    },
    {
      "import": "vdi.service.rest.generated.model.InternalServerError"
    },
    {
      "import": "vdi.service.rest.generated.model.NotFoundError"
    },
    {
      "import": "vdi.service.rest.generated.model.UnauthorizedRequestError"
    },
    {
      "import": "vdi.service.rest.generated.model.support.*"
    },
    {
      "import": "java.io.File"
    },
    {
      "import": "java.net.URI"
    }
  ],
  "modelPackage": "vdi.service.rest.generated.model",
  "supportPackage": "vdi.service.rest.generated.model.support.*",
  "hasImport": true
}