#%RAML 1.0 Resource

displayName: Admin RPC

/datasets:
  displayName: Dataset Operations

  /proxy-upload:
    displayName: Proxy Upload
    post:
      description: |
        Upload a dataset on behalf of a target user.

        **Usage**:
        This endpoint functions the same as the normal
        [create dataset endpoint](#resources:/datasets:post) with the additional
        requirement of a target User ID provided as a header.

        **Example File Upload**:
        ```sh
        curl --header "Admin-Token: ${VDI_ADMIN_TOKEN}" \
             --header "User-ID: ${TARGET_USER_ID}" \
             --form meta=@dataset-metadata.json \
             --form file=@dataset-contents.zip \
             "${VDI_INSTANCE}/admin/rpc/datasets/proxy-upload"
        ```

        **Example URL Upload**:
        ```sh
        curl --header "Admin-Token: ${VDI_ADMIN_TOKEN}" \
             --header "User-ID: ${TARGET_USER_ID}" \
             --form meta=@dataset-metadata.json \
             --form url='https://some.website.com/path/to/file' \
             "${VDI_INSTANCE}/admin/rpc/datasets/proxy-upload"
        ```
      headers:
        User-ID:
          displayName: Target User ID
          description: |
            ID of the target user on whose behalf a dataset is being uploaded
          type: lib.UserId
          required: true
      body:
        multipart/form-data:
          description: |
            `multipart/form-data` HTTP `POST` request to upload a new dataset.

            Note, the body description below is of the multipart form data fields and
            not of a JSON object.

            The `meta` field, however, is expected to be a JSON blob.
          type: lib.DatasetProxyPostRequestBody
      securedBy:
      - AdminToken
      responses:
        200:
          body: lib.DatasetPostResponseBody
        400:
          body: lib.BadRequestError
        403:
          body: lib.ForbiddenError
        422:
          body: lib.UnprocessableEntityError
        500:
          body: lib.ServerError

  /prune:
    displayName: Force Dataset Pruning
    post:
      description: |
        Permanently delete jobs that were soft deleted more than 24 hours prior
        to the execution of this task.

        **Example**
        ```sh
        curl --request POST \
             --header "Admin-Token: ${VDI_ADMIN_TOKEN}" \
             "${VDI_INSTANCE}/admin/rpc/datasets/prune?age_cutoff=2022-03-15"
        ```
      queryParameters:
        age_cutoff?:
          displayName: Retention Window Override
          description: |
            When given, overrides the configured dataset retention duration,
            and instead prunes all datasets that were soft-deleted before this
            timestamp.

            Expected date format is a subset of the RFC3336 format, requiring
            at least `yyyy-MM-dd`, but may be given additional precision part
            by part.

            Examples:
            * `2022-03-15` - Day (assumes time 00:00)
            * `2022-03-15T16` - Hour
            * `2022-03-15T16:30` - Minute
          type: string
      securedBy:
      - AdminToken
      responses:
        204: {}
        400:
          body: lib.BadRequestError
        500:
          body: lib.ServerError

  /reconcile:
    displayName: Execute Reconciler
    post:
      description: |
        Triggers a full reconciliation run if one is not already in progress.

        **Example**
        ```sh
        curl --request POST \
             --header "Admin-Token: ${VDI_ADMIN_TOKEN}" \
             "${VDI_INSTANCE}/admin/rpc/datasets/reconcile"
        ```
      securedBy:
      - AdminToken
      responses:
        204:
          description: Success
        409:
          description: Reconciler already running.
          body: lib.ConflictError
        500:
          body: lib.ServerError

/installs:
  displayName: Data Install Maintenance
  /clear-failed:
    displayName: Clear and Reinstall Failed
    post:
      description: |
        Marks all or target datasets that are in a status of installation
        failure into a `ready-for-reinstall` status then runs the dataset
        reinstallation process which attempts to uninstall and reinstall all
        datasets in that status.

        The request body should specify exactly one of `all` or `targets` to
        select whether install cleanup should target all failed datasets across
        all sites, or if install cleanup should target only specific datasets on
        specific sites.

        If the request specifies neither `all` or `targets` the endpoint will do
        nothing.

        Optionally the query param `skip-run` may be provided to skip the
        execution of the dataset reinstallation process.  This may be used in
        situations where multiple batches of datasets are being marked as
        `ready-for-reinstall`.

        **Single Run Example**
        ```sh
        curl --header "Admin-Token: ${VDI_ADMIN_TOKEN}" \
             --data '{"all":true}'
             "${VDI_INSTANCE}/admin/rpc/datasets/reconcile"
        ```

        **Batch Run Example**
        ```sh
        # Mark datasets as ready for reinstall, but don't start reinstaller yet
        curl --header "Admin-Token: ${VDI_ADMIN_TOKEN}" \
             --data '{"targets":["datasetId": "1235asf", "installTarget": "PlasmoDB"]}'
             "${VDI_INSTANCE}/admin/rpc/datasets/reconcile?skip-run=true"

        curl ...
        curl ...
        curl ...

        # After all datasets have been marked, start the reinstaller.
        curl --request POST \
             --header "Admin-Token: ${VDI_ADMIN_TOKEN}" \
             "${VDI_INSTANCE}/admin/rpc/datasets/reconcile"
        ```
      queryParameters:
        skip-run:
          type: boolean
          required: false
          default: false
      securedBy:
      - AdminToken
      body: lib.InstallCleanupRequestBody
      responses:
        204: {}
        400:
          body: lib.BadRequestError
        500:
          body: lib.ServerError

/object-store:
  displayName: MinIO
  /purge-dataset:
    displayName: Purge Dataset
    post:
      description: |
        Removes a dataset from the object store and internal postgres database.

        This is intended to be used exclusively for clearing bad state created
        by errors or bugs.

        This action does not perform dataset uninstalls, and may leave VDI in a
        bad state if run against a dataset that isn't broken.
      body: lib.DatasetObjectPurgeRequestBody
      securedBy:
      - AdminToken
      responses:
        204: { }
        400:
          body: lib.BadRequestError
        500:
          body: lib.ServerError
